@page "/"
@namespace RavenNest.Blazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
	Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="utf-8" />
 <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 <link rel="preconnect" href="https://fonts.gstatic.com">
 <link href="https://fonts.googleapis.com/css2?family=Heebo:wght@300;400;500;700;800&display=swap" rel="stylesheet">
 <link href="https://fonts.googleapis.com/css?family=Titillium+Web&display=swap" rel="stylesheet">
 <script src="https://kit.fontawesome.com/3f217f080c.js" crossorigin="anonymous"></script>
 <title>Ravenfall.stream</title>
 <base href="~/" />

 <link rel="stylesheet" href="https://ravennestblobstorage.blob.core.windows.net/cdn/unity/TemplateData/style.css">
 <script src="https://ravennestblobstorage.blob.core.windows.net/cdn/unity/TemplateData/UnityProgress.js"></script>
 <script src="https://ravennestblobstorage.blob.core.windows.net/cdn/unity/Build/UnityLoader.js"></script>

 <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
 <link href="css/site.css" rel="stylesheet" />
 <link href="/RavenNest.styles.css" rel="stylesheet" />
 <link rel="icon" type="image/png" href="favicon.png" sizes="32x32">
 <link rel="icon" type="image/png" href="favicon.png" sizes="96x96">
 <link href="_content/Blazored.Typeahead/blazored-typeahead.css" rel="stylesheet" />

 <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>

 <!-- This is the glue between Blazor and Chart.js -->
 <script src="_content/ChartJs.Blazor.Fork/ChartJsBlazorInterop.js"></script>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

 <!-- Load the Twitch embed script -->
 <script src="https://embed.twitch.tv/embed/v1.js"></script>

 <script>

  window.cookies = {
	acceptMessage: function (cookieString) {
   document.cookie = cookieString;
	}
  };

  window.getQueryParam = (name) => {
	let regex = (new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)')).exec(location.search);
	if (regex) {
	 return decodeURIComponent(regex[1]);
	}
	return null;
  }

  window.disableMap = () => {
   window.map = undefined;
  };

  window.updateWorldMap = (time) => {
		const offsetX = 0;
		const offsetY = 0;
		const ctx = window.map.context;
		const canvas = window.map.canvas;
		canvas.width = canvas.clientWidth;
		canvas.height = canvas.width * 0.5625;
		ctx.width = window.map.canvas.clientWidth;
		ctx.height = canvas.height;

		ctx.drawImage(window.map.mapImg, 0, 0, ctx.width, ctx.height);
		ctx.drawImage(window.map.markerImg, 
		  (ctx.width/2) + window.map.position.x + offsetX,
		  (ctx.height/2) + window.map.position.z+ offsetY);

	requestAnimationFrame(t => window.updateWorldMap(t));
  };

  window.initWorldMap = (x,y,z) => {
	const canvas = document.querySelector('#game-map-canvas');
	const firstInit = typeof window.map == 'undefined';
	window.map = {
		mapImg: document.querySelector('#img-map'),
		markerImg: document.querySelector('#img-map-marker'),
		enabled: true,
		context: canvas.getContext('2d'),
		canvas: canvas,
		position: { x, y, z}
	};
	if (firstInit) {
	  requestAnimationFrame(t => window.updateWorldMap(t));
	}
  };

  window.updateGameClientLoginStateAsync = async () => {
	const token = window.getQueryParam('token');
	const state = window.getQueryParam('state');
	const user = window.getQueryParam('user');
	const id = window.getQueryParam('id');
	if (token != null && token.length > 0) {
       try {
	     let requestUrl = 'http://localhost:8182/?token=' + token + '&state=' + state;
	     if (id != null && id.length > 0) {
	    requestUrl += '&id=' + id;
	     }
	     if (user != null && user.length > 0) {
	    requestUrl += '&user=' + user;
	     }
	     const response = await fetch(requestUrl, {
	    method: 'GET',
	     });
       } catch (err) {
	     // ignore the error here,
	     // it will most likely just be because we are doing a cross domain call
	     // but the client will still receive the message nontheless.
       }
       try {
	     window.close();
       } catch{}
       return true;
	}
	return false;
  }

  window.scrollToElementId = (elementId, offset) => {
	var element = document.getElementById(elementId);
	if (!element) {
   return false;
	}
	//element.scrollIntoView();
	window.scroll({ top: (element.offsetTop - offset), left: 0, behavior: 'smooth' });
	return true;
  }

  window.toast = (option) => {
	$('.toast').toast(option);
  };

  window.showCharacterCustomization = () => {
	window.unityInstance = UnityLoader.instantiate("unityContainer", "https://ravennestblobstorage.blob.core.windows.net/cdn/unity/Build/WebGL.json", { onProgress: UnityProgress });
  };
   //window.createTwitchEmbed = (elementId, channel) => {
   //  new Twitch.Embed(elementId, {
   //    width: 854,
   //    height: 480,
   //    channel: "monstercat",
   //  });
   //}
 </script>
</head>
<body>
 <component type="typeof(App)" render-mode="ServerPrerendered" />

 <div id="blazor-error-ui">
  <environment include="Staging,Production">
   An error has occurred. This application may no longer respond until reloaded.
  </environment>
  <environment include="Development">
   An unhandled exception has occurred. See browser dev tools for details.
  </environment>
  <a href="" class="reload">Reload</a>
  <a class="dismiss">🗙</a>
 </div>
 <!-- Global site tag (gtag.js) - Google Analytics -->
 <script async src="https://www.googletagmanager.com/gtag/js?id=UA-149866854-1"></script>
 <script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-149866854-1');
 </script>
 <script src="_framework/blazor.server.js"></script>
 <script src="_content/Blazored.Typeahead/blazored-typeahead.js"></script>
 <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
 <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
</body>
</html>
