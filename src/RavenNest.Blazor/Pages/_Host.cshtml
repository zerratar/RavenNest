@page "/"
@namespace RavenNest.Blazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Heebo:wght@300;400;500;700;800&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Titillium+Web&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
    <link rel="stylesheet" href="/_content/BytexDigital.Blazor.Components.CookieConsent/styles.min.css" />

    <script src="https://kit.fontawesome.com/3f217f080c.js" crossorigin="anonymous"></script>

    @*<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1363457225646772" crossorigin="anonymous"></script>*@

    <title>Ravenfall.stream</title>
    <base href="~/" />

    <link rel="shortcut icon" href="https://ravennestblobstorage.blob.core.windows.net/cdn/20230710/TemplateData/favicon.ico">
    <link rel="stylesheet" href="https://ravennestblobstorage.blob.core.windows.net/cdn/20230710/TemplateData/style.css">

    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />

    <link rel="icon" type="image/png" href="favicon.png" sizes="32x32">
    <link rel="icon" type="image/png" href="favicon.png" sizes="96x96">
    <link href="_content/Blazored.Typeahead/blazored-typeahead.css" rel="stylesheet" />
    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />

    <link href="_content/PSC.Blazor.Components.AutoComplete/css/autocomplete.css" rel="stylesheet" />

    <link href="css/site.css" rel="stylesheet" />
    <link href="/RavenNest.styles.css" rel="stylesheet" />

    <link href="css/dark.css" rel="stylesheet" />
    <!-- This is the glue between Blazor and Chart.js -->
    <script src="js/moment.min.js"></script>

    <!-- Load the Twitch embed script -->
    <script src="https://embed.twitch.tv/embed/v1.js"></script>
    <script src="js/draggable.js"></script>
    <script>

        window.cookies = {
            acceptMessage: function (cookieString) {
                document.cookie = cookieString;
            }
        };

        window.getQueryParam = (name) => {
            let regex = (new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)')).exec(location.search);
            if (regex) {
                return decodeURIComponent(regex[1]);
            }
            return null;
        }

        window.disableMap = () => {
            window.map = undefined;
        };

        window.updateWorldMap = (time) => {
            const offsetX = 0;
            const offsetY = 0;
            const ctx = window.map.context;
            const canvas = window.map.canvas;
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.width * 0.5625;
            ctx.width = window.map.canvas.clientWidth;
            ctx.height = canvas.height;

            ctx.drawImage(window.map.mapImg, 0, 0, ctx.width, ctx.height);
            ctx.drawImage(window.map.markerImg,
                (ctx.width / 2) + window.map.position.x + offsetX,
                (ctx.height / 2) + window.map.position.z + offsetY);

            requestAnimationFrame(t => window.updateWorldMap(t));
        };

        window.initWorldMap = (x, y, z) => {
            const canvas = document.querySelector('#game-map-canvas');
            const firstInit = typeof window.map == 'undefined';
            window.map = {
                mapImg: document.querySelector('#img-map'),
                markerImg: document.querySelector('#img-map-marker'),
                enabled: true,
                context: canvas.getContext('2d'),
                canvas: canvas,
                position: { x, y, z }
            };
            if (firstInit) {
                requestAnimationFrame(t => window.updateWorldMap(t));
            }
        };

        window.updateGameClientLoginStateAsync = async () => {
            const token = window.getQueryParam('token');
            const state = window.getQueryParam('state');
            const user = window.getQueryParam('user');
            const id = window.getQueryParam('id');
            if (token != null && token.length > 0) {
                try {
                    let requestUrl = 'http://localhost:8182/?token=' + token + '&state=' + state;
                    if (id != null && id.length > 0) {
                        requestUrl += '&id=' + id;
                    }
                    if (user != null && user.length > 0) {
                        requestUrl += '&user=' + user;
                    }
                    const response = await fetch(requestUrl, {
                        method: 'GET',
                    });
                } catch (err) {
                    // ignore the error here,
                    // it will most likely just be because we are doing a cross domain call
                    // but the client will still receive the message nontheless.
                }
                try {
                    window.close();
                } catch { }
                return true;
            }
            return false;
        }

        window.scrollToElementId = (elementId, offset) => {
            var element = document.getElementById(elementId);
            if (!element) {
                return false;
            }
            //element.scrollIntoView();
            window.scroll({ top: (element.offsetTop - offset), left: 0, behavior: 'smooth' });
            return true;
        }

        window.toast = (option) => {
            $('.toast').toast(option);
        };

        window.enableAIAssistance = () => {
            dragElement(document.querySelector(".ai-assistance-toggle"));
        };

        window.showCharacterCustomization = () => {

            var baseUrl = 'https://ravennestblobstorage.blob.core.windows.net/cdn/20230710/';

            var container = document.querySelector("#unity-container");
            var canvas = document.querySelector("#unity-canvas");
            var loadingBar = document.querySelector("#unity-loading-bar");
            var progressBarFull = document.querySelector("#unity-progress-bar-full");
            var fullscreenButton = document.querySelector("#unity-fullscreen-button");
            var warningBanner = document.querySelector("#unity-warning");

            // Shows a temporary message banner/ribbon for a few seconds, or
            // a permanent error message on top of the canvas if type=='error'.
            // If type=='warning', a yellow highlight color is used.
            // Modify or remove this function to customize the visually presented
            // way that non-critical warnings and error messages are presented to the
            // user.
            function unityShowBanner(msg, type) {
                function updateBannerVisibility() {
                    warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
                }
                var div = document.createElement('div');
                div.innerHTML = msg;
                warningBanner.appendChild(div);
                if (type == 'error') div.style = 'background: red; padding: 10px;';
                else {
                    if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
                    setTimeout(function () {
                        warningBanner.removeChild(div);
                        updateBannerVisibility();
                    }, 5000);
                }
                updateBannerVisibility();
            }

            var buildUrl = baseUrl + "Build";
            var href = window.location.href;
            var localhost = href.indexOf("localhost") >= 0 || href.indexOf("debug") || href.indexOf("development") >= 0 ? '?development=true' : '';
            if (localhost != '') {
                console.log("Running localhost");
            }
            var loaderUrl = buildUrl + "/WebGL.loader.js" + localhost;
            var config = {
                dataUrl: buildUrl + "/WebGL.data.gz" + localhost,
                frameworkUrl: buildUrl + "/WebGL.framework.js.gz" + localhost,
                codeUrl: buildUrl + "/WebGL.wasm.gz" + localhost,
                streamingAssetsUrl: "StreamingAssets",
                companyName: "Shinobytes",
                productName: "Ravenfall Character Customization",
                productVersion: "1.0",
                showBanner: unityShowBanner,
            };
            // By default Unity keeps WebGL canvas render target size matched with
            // the DOM size of the canvas element (scaled by window.devicePixelRatio)
            // Set this to false if you want to decouple this synchronization from
            // happening inside the engine, and you would instead like to size up
            // the canvas DOM size and WebGL render target sizes yourself.
            // config.matchWebGLToCanvasSize = false;

            if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
                // Mobile device style: fill the whole browser client area with the game canvas:

                var meta = document.createElement('meta');
                meta.name = 'viewport';
                meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';
                document.getElementsByTagName('head')[0].appendChild(meta);
                container.className = "unity-mobile";
                canvas.className = "unity-mobile";

                // To lower canvas resolution on mobile devices to gain some
                // performance, uncomment the following line:
                // config.devicePixelRatio = 1;


            } else {
                // Desktop style: Render the game canvas in a window that can be maximized to fullscreen:

                canvas.style.width = "960px";
                canvas.style.height = "600px";
            }

            loadingBar.style.display = "block";

            var script = document.createElement("script");
            script.src = loaderUrl;
            script.onload = () => {
                createUnityInstance(canvas, config, (progress) => {
                    progressBarFull.style.width = 100 * progress + "%";
                }).then((unityInstance) => {
                    loadingBar.style.display = "none";
                    fullscreenButton.onclick = () => {
                        unityInstance.SetFullscreen(1);
                    };
                    window.unityInstance = unityInstance;
                }).catch((message) => {
                    alert(message);
                });
            };

            document.body.appendChild(script);
        };

    </script>
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async data-consent-category="google" defer="true" src="https://www.googletagmanager.com/gtag/js?id=UA-149866854-1"></script>
    <script data-consent-category="google" defer="true">
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());
        gtag('config', 'UA-149866854-1');
    </script>
    <script src="_framework/blazor.server.js"></script>
    <script src="_content/Blazored.Typeahead/blazored-typeahead.js"></script>
    <script src="js/jquery.min.js"></script>


    <!-- inside of body section and after the div/app tag  -->
    <!-- These are the standard js dependencies this provider tipically dependes upon, but Blazorise deems these as optional as Blazorise Components should work correctly without these  -->
    <script src="js/jquery.slim.min.js"></script>
    <script src="js/popper.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/chart.min.js"></script>
    <script src="_content/PSC.Blazor.Components.AutoComplete/js/autocomplete.js"></script>

    <script>
        if (window.matchMedia("(prefers-color-scheme:dark)").matches) {
            document.querySelector("body").classList.toggle("dark-mode", true);
        } else {
            document.querySelector("body").classList.toggle("light-mode", true);
        }
    </script>
</body>
</html>
