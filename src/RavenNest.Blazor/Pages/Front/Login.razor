@page "/login"
@using RavenNest.Blazor.Services.Models
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject RavenNest.Blazor.Services.AuthService AuthService

@if (!IsLoggingIn)
{
  @if (session.UserId == null)
  {
    <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
      <DataAnnotationsValidator />
      <ValidationSummary />

      <InputText placeholder="Username" id="username" @bind-Value="loginModel.Username" />
      <InputText type="password" placeholder="Password" id="password" @bind-Value="loginModel.Password" />

      <button type="submit">Submit</button>
    </EditForm>

    <div class="login twitch" @onclick="LoginWithTwitch">
      <i class="fab fa-twitch"></i> Login with Twitch
    </div>
  }
  else
  {
    <p>Welcome back, @session.UserName</p>
  }

  @if (loginFailed)
  {
    <p>Whops. Wrong username or password.</p>
  }
}

@if (IsLoggingIn)
{
  <p>Logging in... Hold on to your horses!</p>
}

@code {

  private string message;
  private UserLoginModel loginModel = new UserLoginModel();
  private RavenNest.Sessions.SessionInfo session;
  private bool loginFailed = false;
  private bool userInitiatedLogin = false;

  private bool IsAuthenticated => session != null && session.UserId != null;
  private bool IsLoggingIn => !IsAuthenticated && (userInitiatedLogin || HasQueryParams());

  protected override void OnInitialized()
  {
    HandleTwitchTokens();
    NavigateToHomeIfAuthenticated();
  }

  private bool HasQueryParams()
  {
    return NavigationManager.ToAbsoluteUri(NavigationManager.Uri).ToString().Contains("=");
  }

  private async void HandleTwitchTokens()
  {
    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    var atn = "access_token";
    userInitiatedLogin = true;
    if (!uri.ToString().Contains(atn + "="))
    {
      session = AuthService.GetSession();
      userInitiatedLogin = false;
      return;
    }
    loginFailed = false;

    var token = uri.ToString()
        .Split(new string[] { "=" }, StringSplitOptions.RemoveEmptyEntries)[1]
        .Split('&')[0];
    session = await AuthService.TwitchLoginAsync(token);
    userInitiatedLogin = false;
    loginFailed = !IsAuthenticated;
    NavigateToHomeIfAuthenticated();
  }

  private async void HandleValidSubmit()
  {
    userInitiatedLogin = true;
    session = await AuthService.LoginAsync(loginModel);

    NavigateToHomeIfAuthenticated();
  }

  private void LoginWithTwitch()
  {
    userInitiatedLogin = true;
    var url = AuthService.GetTwitchLoginUrl();
    if (!string.IsNullOrEmpty(url))
    {
      NavigationManager.NavigateTo(url, true);
    }
  }

  private void NavigateToHomeIfAuthenticated()
  {
    if (!IsAuthenticated)
      return;

    loginFailed = false;
    userInitiatedLogin = false;
    MainLayout.Instance.UpdateSession();
    NavigationManager.NavigateTo("/");
  }

}
