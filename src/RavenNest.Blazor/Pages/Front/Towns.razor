@page "/town"
@page "/towns"
@using RavenNest.Blazor.Services.Models
@using Microsoft.AspNetCore.WebUtilities
@using RavenNest.Blazor.Services
@using RavenNest.BusinessLogic.Net
@inject NavigationManager NavigationManager
@inject TownService TownService
@inject AuthService AuthService

<div class="top-section">
	<div class="hero-text">
		<h1>Town bonuses in active streams</h1>
	</div>
</div>

<div class="white-section-break"></div>
<div class="page-content">
	<div class="section">

		@if (data == null)
		{
	  <h2>Loading town data...</h2>
	  <LoadIndicator></LoadIndicator>
		}
		else
		{
	  <!-- Group these, By Skill/Category -->
	  <!-- Then order by the streamer with highest % -->

	  <div class="type-groups">
				@foreach (var group in data.Keys)
				{
					var towns = data[group];

		   <div>
			class="type-group">
			<div class="type-group-name">@group</div>

			<table class="type-group-town-list">
			 <thead>
			  <tr>
			   <th>Owner</th>
			   <th>Name</th>
			   <th>Bonus</th>
			   <th>Level</th>
			   <th>Slots</th>
			  </tr>
			 </thead>
			 <tbody>
								@foreach (var item in towns)
								{
				  <tr class="town-item">
				   <td class='town-owner'>@item.Owner.UserName</td>
				   <td class='town-name'>@item.Name</td>
				   <td class='town-bonus'>@item.GetActiveBonus(group)</td>
				   <td class='town-level'>@item.Level</td>
				   <td class='town-slots' title="The slot/hut info for this town. Active Count / Used Count / Total Count"><span class="town-slot-active">@item.ActiveSlotCount</span>/<span class="town-slot-used">@item.UsedSlotCount</span>/<span class="town-slot-total">@item.TotalSlotCount</span></td>
				  </tr>
								}
			 </tbody>
			</table>
		   </div>
				}
	  </div>

		}
 </div>
</div>

@code {

	private Dictionary<TownHouseSlotType, List<TownData>> data = null;
	private List<TownHouseSlotType> slotTypes = null;

	protected override void OnInitialized()
	{
		slotTypes = Enum.GetValues(typeof(TownHouseSlotType)).Cast<TownHouseSlotType>().ToList();
		LoadTownDataAsync();
	}

	private async Task LoadTownDataAsync()
	{
		var result = await TownService.GetTownsAsync();

		data = new Dictionary<TownHouseSlotType, List<TownData>>();
		foreach (var st in slotTypes)
		{
			var hasBonus = result.Select(x => new { Town = x, TypeBonus = x.GetActiveBonus(st) }).Where(x => x.TypeBonus > 0).ToList();
			data[st] = hasBonus.OrderByDescending(x => x.TypeBonus).Select(x => x.Town).ToList();
		}

		StateHasChanged();
	}

}
