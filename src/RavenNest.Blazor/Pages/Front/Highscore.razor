@*@page "/highscore"
@page "/leaderboard"
@page "/highscore/{highscoreSkill}"
@page "/leaderboard/{highscoreSkill}"
@page "/leaderboard/{highscoreSkill}/{characterIndex:int}"
@page "/highscore/{highscoreSkill}/{characterIndex:int}"
@page "/leaderboard/{highscoreSkill}/{characterIndex:int}/{top:int}"
@page "/highscore/{highscoreSkill}/{characterIndex:int}/{top:int}"*@

@* Optional Parameters - Not the bug I was fixing but it tidier!
  *@
@page "/leaderboard/{HighscoreSkill?}/{dirtyCharacterIndex:int?}/{dirtyTop:int?}"
@page "/highscore/{HighscoreSkill?}/{dirtyCharacterIndex:int?}/{dirtyTop:int?}"

@using RavenNest.Blazor.Services.Models
@using Microsoft.AspNetCore.WebUtilities
@using RavenNest.Blazor.Services
@using RavenNest.BusinessLogic
@inject NavigationManager NavigationManager
@inject HighscoreService HighscoreService
@inject AuthService AuthService

<div class="top-section">
    <div class="hero-text">
        <h1>
            Highscore Top @Top characters
            @if (activeSkill != null) {
                <text>- @activeSkill.Name</text>;                ;
            }
        </h1>
    </div>
</div>

<div class="white-section-break"></div>
<div class="page-content">
    <div class="section">


        <div class="skill-selector">
            @for (var i = 0; i < characterIndexNames.Length; ++i)
            {
                var name = characterIndexNames[i];
                var index = characterIndices[i];
                {
                    <button @onclick="(() => SelectIndex(index))" class="btn @(CharacterIndex == index ? "active" : "")">@name</button>
                }
            }
        </div>

        <div class="skill-selector">
            @foreach (var skill in Skills)
            {
                <button @onclick="(() => SelectSkill(skill))" class="btn @(skill.Active ? "active" : "")">@skill.Name</button>
            }
        </div>
        <table class="highscore-list">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Character</th>
                    <th>Level</th>
                    <th>Experience</th>
                </tr>
            </thead>
            <tbody>
                @if (highscores == null)
                {
                    <LoadIndicator></LoadIndicator>

                    <tr class="highscore-item">
                        <td class='player-rank'>**</td>
                        <td class='player-name'>Loading</td>
                        <td class='player-level'>**</td>
                        <td class='player-experience'>**</td>
                    </tr>
                }
                else
                {
                    @foreach (var item in highscores.Players)
                    {
                        <tr class="highscore-item" @onclick="(() => DisplayPlayer(item))">
                            <td class='player-rank'>@item.Rank</td>
                            <td class='player-name'>@item.PlayerName<span class='player-character-index' alt='Character Number'>#@item.CharacterIndex</span></td>
                            <td class='player-level'>

                                @if (item.Level == GameMath.MaxLevel)
                                {
                                    @if (item.OrderAchieved == 1)
                                    {
                                        <i class="fa-solid fa-medal first" title="@("Awarded to " + item.PlayerName + " for reaching max level first in the skill " + item.Skill)"></i>
                                        <div class="skill-max-container" title="@("This character reached max level first on " + item.DateReached.ToString("D"))">
                                            <p class="skill-max gold" data-content="999">999</p>
                                        </div>
                                    }
                                    else if (item.OrderAchieved == 2)
                                    {
                                        <i class="fa-solid fa-award second" title="@("Awarded to " + item.PlayerName + " for reaching max level second in the skill " + item.Skill)"></i>
                                        <div class="skill-max-container" title="@("This character reached max level in second place on " + item.DateReached.ToString("D"))">
                                            <p class="skill-max silver" data-content="999">999</p>
                                        </div>
                                    }
                                    else if (item.OrderAchieved == 3)
                                    {
                                        <i class="fa-solid fa-award-simple third" title="@("Awarded to " + item.PlayerName + " for reaching max level third in the skill " + item.Skill)"></i>
                                        <div class="skill-max-container" title="@("This character reached max level in third place on " + item.DateReached.ToString("D"))">
                                            <p class="skill-max bronze" data-content="999">999</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="skill-max-container" title="@("This character has reached "+ item.Level + " on " + item.DateReached.ToString("D"))">
                                            <p class="skill-max" data-content="999">999</p>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="skill-current-level-container" title="@("This character has reached "+ item.Level + " on " + item.DateReached.ToString("D"))">
                                        <p class="skill-current-level" data-content="@item.Level">@item.Level</p>
                                    </div>
                                }
                            </td>
                            <td class='player-experience'>@item.Experience</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public int? DirtyCharacterIndex { get; set; }
    [Parameter]
    public string HighscoreSkill { get; set; }
    [Parameter]
    public int? DirtyTop { get; set; }

    public int CharacterIndex { get; set; }
    //public string? HighscoreSkill { get; set; }
    public int Top { get; set; }

    private Models.HighScoreCollection highscores;
    private Skill activeSkill;
    private string[] characterIndexNames = new string[] { "All Characters", "Main", "Second", "Third" };
    private int[] characterIndices = new int[] { -1, 0, 1, 2 };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        //Clean Input a little so server can't be overloaded fetching 100,000 records and make it a little fail safe to mistakes in url'
        CharacterIndex = DirtyCharacterIndex ?? -1;
        if (CharacterIndex < -1 || CharacterIndex > 2) CharacterIndex = -1;
        Top = DirtyTop ?? 100;
        if (Top < 1) Top = 100;
        if (Top > 1000) Top = 1000;

        LoadHighscoreAsync();
    }

    private void SelectIndex(int index)
    {
        if (activeSkill != null)
        {
            NavigationManager.NavigateTo(string.Format(activeSkill.Link, index, Top), true);
        }
        else
        {
            NavigationManager.NavigateTo("/leaderboard/All/" + index, true);
        }
    }

    private void SelectSkill(Skill skill)
    {
        NavigationManager.NavigateTo(string.Format(skill.Link, CharacterIndex, Top), true);
    }
    private void DisplayPlayer(Models.HighScoreItem player)
    {
        NavigationManager.NavigateTo("/inspect/" + player.CharacterId);
    }

    private async Task LoadHighscoreAsync()
    {
        if (HighscoreSkill != null)
        {
            highscores = await HighscoreService.GetHighscoreAsync(HighscoreSkill, 0, Top, CharacterIndex);
            var s = Skills.FirstOrDefault(x => x.Name.Equals(HighscoreSkill, StringComparison.OrdinalIgnoreCase));
            if (s != null)
            {
                Skills[0].Active = false;
                s.Active = true;
                activeSkill = s;
            }
        }
        else
        {
            highscores = await HighscoreService.GetHighscoreAsync(0, Top, CharacterIndex);
        }
        StateHasChanged();
    }

    private Skill[] Skills { get; } =
      new[] {
        new Skill("All", true),
        new Skill("Attack"),
        new Skill("Defense"),
        new Skill("Strength"),
        new Skill("Health"),
        new Skill("Woodcutting"),
        new Skill("Fishing"),
        new Skill("Mining"),
        new Skill("Crafting"),
        new Skill("Cooking"),
        new Skill("Farming"),
        new Skill("Slayer"),
        new Skill("Magic"),
        new Skill("Ranged"),
        new Skill("Sailing"),
        new Skill("Healing"),
       };

    private class Skill
    {
        public Skill() { }
        public Skill(string name, bool active = false)
        {
            Name = name;
            Active = active;
        }

        public string Link => this.Name == "All" ? "/leaderboard/All/{0}" : "/leaderboard/" + this.Name + "/{0}/{1}";
        public string Name { get; set; }
        public bool Active { get; set; }
    }
}
