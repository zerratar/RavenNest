@page "/items"
@page "/items/{Id}"

@using RavenNest.BusinessLogic.Game
@using RavenNest.Blazor.Services
@using RavenNest.DataModels
@using ItemFilter = RavenNest.Models.ItemFilter;
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject ItemService ItemService
@inject IJSRuntime JS

<div class="top-section">
    <div class="hero-text">
        <h1>All Items</h1>
    </div>
</div>

<div class="white-section-break"></div>
<div class="page-content">
    <div class="section">


        @if (items == null)
        {
            <LoadIndicator></LoadIndicator>
        }
        else
        {
            <div class="stash item-filters">
                <button class="item-filter @(itemFilter == ItemFilter.All ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.All)">
                    <span class="item-filter-text">All</span>
                    <i class="fa-sharp fa-solid fa-rectangles-mixed"></i>
                </button>
                <button class="item-filter @(itemFilter == ItemFilter.Swords ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Swords)">
                    <span class="item-filter-text">Swords</span>
                    <i class="fa-sharp fa-solid fa-sword"></i>
                </button>
                <button class="item-filter @(itemFilter == ItemFilter.Axes ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Axes)">
                    <span class="item-filter-text">Axes</span>
                    <i class="fa-sharp fa-solid fa-axe"></i>
                </button>
                <button class="item-filter @(itemFilter == ItemFilter.Spears ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Spears)">
                    <span class="item-filter-text">Spears</span>
                    <i class="fa-solid fa-scythe"></i>
                </button>
                <button class="item-filter @(itemFilter == ItemFilter.Bows ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Bows)">
                    <span class="item-filter-text">Bows</span>
                    <i class="fa-sharp fa-solid fa-bow-arrow"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Staves ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Staves)">
                    <span class="item-filter-text">Staves</span>
                    <i class="fa-sharp fa-solid fa-staff"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Shields ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Shields)">
                    <span class="item-filter-text">Shields</span>
                    <i class="fa-sharp fa-solid fa-shield"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Armors ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Armors)">
                    <span class="item-filter-text">Armors</span>
                    <i class="fa-sharp fa-solid fa-helmet-battle"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Accessories ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Accessories)">
                    <span class="item-filter-text">Accessories</span>
                    <i class="fa-sharp fa-solid fa-gem"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Pets ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Pets)">
                    <span class="item-filter-text">Pets</span>
                    <i class="fa-sharp fa-solid fa-dog"></i>
                </button>


                <button class="item-filter @(itemFilter == ItemFilter.Scrolls ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Scrolls)">
                    <span class="item-filter-text">Scrolls</span>
                    <i class="fa-sharp fa-solid fa-scroll"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Woodcutting ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Woodcutting)">
                    <span class="item-filter-text">Woodcutting</span>
                    <i class="fa-solid fa-tree"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Mining ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Mining)">
                    <span class="item-filter-text">Mining</span>
                    <i class="fa-solid fa-pickaxe"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Fishing ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Fishing)">
                    <span class="item-filter-text">Fishing</span>
                    <i class="fa-sharp fa-solid fa-fishing-rod"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Farming ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Farming)">
                    <span class="item-filter-text">Farming</span>
                    <i class="fa-solid fa-wheat"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Gathering ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Gathering)">
                    <span class="item-filter-text">Gathering</span>
                    <i class="fa-solid fa-mushroom"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Crafting ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Crafting)">
                    <span class="item-filter-text">Crafting</span>
                    <i class="fa-sharp fa-solid fa-hammer"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Cooking ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Cooking)">
                    <span class="item-filter-text">Cooking</span>
                    <i class="fa-sharp fa-solid fa-user-chef"></i>
                </button>

                <button class="item-filter @(itemFilter == ItemFilter.Alchemy ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Alchemy)">
                    <span class="item-filter-text">Alchemy</span>
                    <i class="fa-sharp fa-solid fa-flask-round-potion"></i>
                </button>
            </div>

            @if (sorting)
            {
                <LoadIndicator></LoadIndicator>
            }

            <table class="items-list">
                <thead>
                    <tr>
                        <th></th>
                        <th class="m-item-name" @onclick="SortByName">Name <span>@GetIndicator("name")</span></th>
                        <th class="m-item-description">Description</th>
                        <th class="m-item-stats" @onclick="SortByStats">Stats <span>@GetIndicator("stats")</span></th>
                        <th class="m-item-level" @onclick="SortByLevelReq">Level Req <span>@GetIndicator("lev-req")</span></th>
                        <th class="m-item-category" @onclick="SortByCategory">Category <span>@GetIndicator("category")</span></th>
                        <th class="m-item-type" @onclick="SortByType">Item Type <span>@GetIndicator("type")</span></th>
                        <th class="m-item-material" @onclick="SortByMaterial">Material Type <span>@GetIndicator("material")</span></th>
                        <th class="m-item-price" @onclick="SortByVendorPrice">Vendor Price <span>@GetIndicator("vendor")</span></th>
                        <th class="m-item-enchantments" @onclick="SortByEnchantmentSlots">Max Enchantments <span>@GetIndicator("enchantment")</span></th>
                        <th class="m-item-uses">Use &amp; Source</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in items)
                    {
                        <tr id="@item.Id" class="@(Id == item.Id.ToString() ? "item-row selected" : "item-row")">
                            <td class="m-item-image"><img src="@(ItemService.GetItemImage(item.Id.ToString(), item.Name))" style="width: 40px" /></td>
                            <td class='item name m-item-name'>@item.Name</td>
                            <td class='item description m-item-description'>@item.Description</td>
                            <td class='item m-item-stats'>
                                @if (item.WeaponAim > 0)
                                {
                                    <span class="item-stat" title="Weapon Aim - Increases your hit rate in melee"><i class="fas fa-crosshairs"></i>@item.WeaponAim</span>
                                }
                                @if (item.WeaponPower > 0)
                                {
                                    <span class="item-stat" title="Weapon Power - Increases your maximum damage in melee"><i class="fas fa-swords"></i>@item.WeaponPower</span>
                                }
                                @if (item.RangedAim > 0)
                                {
                                    <span class="item-stat" title="Ranged Aim - Increases your ranged hit rate"><i class="fas fa-crosshairs"></i>@item.RangedAim</span>
                                }
                                @if (item.RangedPower > 0)
                                {
                                    <span class="item-stat" title="Ranged Power - Increases your ranged maximum damage"><i class="fas fa-bow-arrow"></i>@item.RangedPower</span>
                                }
                                @if (item.MagicAim > 0)
                                {
                                    <span class="item-stat" title="Magic Aim - Increases your magic hit rate">
                                        <i class="fas fa-wand"></i>@item.MagicAim
                                    </span>
                                }
                                @if (item.MagicPower > 0)
                                {
                                    <span class="item-stat" title="Magic Power - Increases your magic maximum damage">
                                        <i class="fas fa-hand-holding-magic"></i>
                                        @item.MagicPower
                                    </span>
                                }
                                @if (item.ArmorPower > 0)
                                {
                                    <span class="item-stat" title="Armor Power - Decreases the hit rate of your attacker"><i class="fas fa-shield"></i>@item.ArmorPower</span>
                                }
                                @if ((item.WeaponAim + item.WeaponPower + item.RangedAim + item.RangedPower + item.MagicAim + item.MagicPower + item.ArmorPower) == 0)
                                {
                                    <span>-</span>
                                }
                            </td>
                            <td class='item m-item-level'>
                                @if (item.RequiredSlayerLevel > 0)
                                {
                                    <span class="item-stat" title="Required Slayer Level">
                                        <i class="fas fa-skull"></i>
                                        @item.RequiredSlayerLevel
                                    </span>
                                }
                                @if (item.RequiredAttackLevel > 0)
                                {
                                    <span class="item-stat" title="Required Attack Level">
                                        <i class="fas fa-swords"></i>
                                        @item.RequiredAttackLevel
                                    </span>
                                }
                                @if (item.RequiredDefenseLevel > 0)
                                {
                                    <span class="item-stat" title="Required Defense Level">
                                        <i class="fas fa-shield"></i>
                                        @item.RequiredDefenseLevel
                                    </span>
                                }
                                @if (item.RequiredMagicLevel > 0)
                                {
                                    <span class="item-stat" title="Required Magic or Healing Level">
                                        <i class="fas fa-hand-holding-magic"></i>
                                        @item.RequiredMagicLevel
                                    </span>
                                }
                                @if (item.RequiredRangedLevel > 0)
                                {
                                    <span class="item-stat" title="Required Ranged Level">
                                        <i class="fas fa-bow-arrow"></i>
                                        @item.RequiredRangedLevel
                                    </span>
                                }
                                @if ((item.RequiredRangedLevel + item.RequiredMagicLevel + item.RequiredDefenseLevel + item.RequiredAttackLevel) == 0)
                                {
                                    <span>-</span>
                                }
                            </td>
                            <td class='item m-item-category'>@item.Category</td>
                            <td class='item m-item-type'>@ItemService.GetTypeName(item)</td>
                            <td class='item m-item-material'>@ItemService.GetMaterialName(item)</td>
                            <td class='item m-item-price'>@item.ShopSellPrice&nbsp;<img class="ravenCoins" src="/favicon.png" /></td>
                            <td class='item m-item-enchantments'>
                                @{
                                    if (EnchantmentManager.CanBeEnchanted(item))
                                    {
                                        var itemLvReq = GameMath.GetItemLevel(item);
                                        var itemMaxAttrCount = GameMath.GetMaxEnchantingAttributeCount(itemLvReq);
                                        <div class="enchantment">
                                            <span class="max-enchantment-slots">@itemMaxAttrCount</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <span>N/A</span>
                                    }
                                }
                            </td>
                            <td class='item recipe m-item-uses'>
                                @{
                                    var drop = ItemService.GetResourceItemDrop(item.Id);
                                    if (drop != null)
                                    {
                                        <div class="drop-details">
                                            <label class='drop-label'>Dropped from</label>
                                            <div class="drop-skill-level">
                                                <label>@drop.RequiredSkill.ToString() Level </label>
                                                <span class='drop-level-requirement'>@drop.LevelRequirement</span>
                                            </div>
                                        </div>
                                    }

                                    var itemRecipe = ItemService.GetItemRecipe(item.Id);
                                    if (itemRecipe != null)
                                    {
                                        <div class="recipe-details">
                                            <div class="crafting-level">
                                                <label>@itemRecipe.RequiredSkill.ToString() Level </label>
                                                <span class='crafting-level-requirement'>@itemRecipe.RequiredLevel</span>
                                            </div>
                                            <div class="crafting-ingredients">
                                                @{
                                                    var ingredients = itemRecipe.Ingredients;
                                                    foreach (var req in ingredients)
                                                    {
                                                        var reqItem = availableItems.First(x => x.Id == req.ItemId);
                                                        <span><a href="/items/@reqItem.Id">@(reqItem.Name)</a> x@(req.Amount)&nbsp;</span>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }

                                    // check if part of recipes.
                                    // check if this is part of a recipe, if so, show the recipe
                                    <div class="recipe-list">
                                        @{
                                            var itemRecipes = ItemService.GetItemRecipesByIngredient(item.Id);
                                            if (itemRecipes != null && itemRecipes.Count > 0)
                                            {
                                                <label class='recipe-list-label'>Ingredient in</label>
                                                @foreach (var r in itemRecipes)
                                                {
                                                    <span><a href="/items/@r.ItemId">@(r.Name)</a>&nbsp;</span>
                                                }
                                            }
                                        }
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>
@code {

    [Parameter]
    public string Id { get; set; }

    private bool sorting;

    private RavenNest.Models.ItemCollection availableItems;
    private RavenNest.Models.ItemCollection items;

    private string sort = "name";
    private BusinessLogic.Game.SortDirection sortDirection;
    private RavenNest.Models.ItemFilter itemFilter = RavenNest.Models.ItemFilter.All;

    protected override void OnInitialized()
    {
        LoadItems();
    }

    private async void LoadItems()
    {
        availableItems = await ItemService.GetItemsAsync();
        items = new Models.ItemCollection(availableItems.OrderBy(x => x.Name));
        StateHasChanged();
    }

    private void SelectItemFilter(ItemFilter newItemFilter)
    {
        itemFilter = newItemFilter;
        items = new Models.ItemCollection(availableItems.Where(x => Filter(x)).OrderBy(x => x.Name));
        InvokeAsync(StateHasChanged);
    }

    private bool Filter(Models.Item item)
    {
        return ItemService.Filter(itemFilter, item);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!string.IsNullOrEmpty(Id))
            ScrollToElementId(Id);
    }

    private MarkupString GetIndicator(string value)
    {
        if (value != sort)
        {
            return (MarkupString)"";
        }

        return (MarkupString)(sortDirection == BusinessLogic.Game.SortDirection.Ascending ? "&uarr;" : "&darr;");
    }

    private async void SortByName()
    {
        SetSorting("name");
        await SortBy(x => x.Name);
    }
    private async void SortByLevelReq()
    {
        SetSorting("lev-req");
        await SortBy(x => (x.RequiredAttackLevel + x.RequiredDefenseLevel + x.RequiredMagicLevel + x.RequiredRangedLevel + x.RequiredSlayerLevel));
    }
    private async void SortByCategory()
    {
        SetSorting("category");
        await SortBy(x => (int)x.Category);
    }
    private async void SortByType()
    {
        SetSorting("type");
        await SortBy(x => (int)x.Type);
    }
    private async void SortByMaterial()
    {
        SetSorting("material");
        await SortBy(x => ItemService.GetMaterialIndex(x));
    }
    private async void SortByVendorPrice()
    {
        SetSorting("vendor");
        await SortBy(x => x.ShopSellPrice);
    }

    private async void SortByEnchantmentSlots()
    {
        SetSorting("enchantment");
        await SortBy(x =>
        {
            if (!EnchantmentManager.CanBeEnchanted(x))
                return 0;

            var itemLvReq = GameMath.GetItemLevel(x);
            var itemMaxAttrCount = GameMath.GetMaxEnchantingAttributeCount(itemLvReq);
            return itemMaxAttrCount;
        });
    }

    private async void SortByStats()
    {
        SetSorting("stats");
        await SortBy(x => (x.ArmorPower + x.MagicPower + x.RangedPower + x.WeaponPower + x.MagicAim + x.RangedAim + x.WeaponAim));
    }

    private async Task SortBy<T>(Func<Models.Item, T> sort)
    {
        try
        {
            sorting = true;
            await Task.Run(() =>
            {
                if (sortDirection == BusinessLogic.Game.SortDirection.Descending)
                {
                    items = new Models.ItemCollection(items.OrderByDescending(sort));
                    return;
                }
                items = new Models.ItemCollection(items.OrderBy(sort));
            });
        }
        finally
        {
            sorting = false;
            StateHasChanged();
        }
    }

    private void SetSorting(string value)
    {
        if (sort != value)
        {
            sortDirection = BusinessLogic.Game.SortDirection.Ascending;
        }
        else
        {
            sortDirection = (BusinessLogic.Game.SortDirection)(((int)sortDirection + 1) % Enum.GetValues(typeof(BusinessLogic.Game.SortDirection)).Length);
        }
        sort = value;
    }

    private async void ScrollToElementId(string elementId)
    {
        await JS.InvokeAsync<bool>("scrollToElementId", new object[] { elementId, 5 });
    }
}
