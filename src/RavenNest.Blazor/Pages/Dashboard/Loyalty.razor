@layout DashboardLayout
@page "/loyalty"
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.LoyaltyService LoyaltyService
@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject RavenNest.Blazor.Services.ItemService ItemService

@inject NavigationManager NavigationManager

<h1 class="page-title">Loyalty</h1>

<div class="tab-view">
    <button @onclick="ViewStreamers" class="tab-link @(viewState == LoyaltyViewState.OtherStream ? "active":"")">Loyalty towards other streamers</button>
    <button @onclick="ViewMyStream" class="tab-link @(viewState == LoyaltyViewState.MyStream ? "active":"")">My Stream (Loyalty towards me)</button>
</div>

@if (session == null)
{
    <LoadIndicator></LoadIndicator>
}
else
{
    @switch (viewState)
    {
        case LoyaltyViewState.MyStream:
            {
                if (!isStreamer)
                {
                    <h1>No data recorded</h1>
                    <p>Once you start streaming Ravenfall, you will be able to track user/viewer loyalty towards you in here.</p>
                }
                else
                {
                    @*<h1>Viewer Loyalty</h1>*@
                    <h4>Here you can keep track on your viewers to see who has been playing on your stream and for how long.</h4>
                    if (loyaltyData == null)
                    {
                        <LoadIndicator></LoadIndicator>
                    }
                    else
                    {
                        <div class="loyalty-stats">
                            <h3>Stats</h3>

                            <div class="loyalty-stats-rows">
                                <div class="stats-row">
                                    <label class="stats-label">Earliest known Stream</label>
                                    <span class="stats-value">@loyaltyData.FirstStream</span>
                                </div>
                                <div class="stats-row">
                                    <label class="stats-label">New game sessions&nbsp;<span class="fas fa-help" alt="Not all your game sessions as some sessions are re-used."></span></label>
                                    <span class="stats-value">@loyaltyData.SessionCount</span>
                                </div>
                                <div class="stats-row">
                                    <label class="stats-label">Total bits cheered</label>
                                    <span class="stats-value">@loyaltyData.TotalBitsCheered</span>
                                </div>
                                <div class="stats-row">
                                    <label class="stats-label">Total subs gifted</label>
                                    <span class="stats-value">@loyaltyData.TotalSubsGifted</span>
                                </div>
                                <div class="stats-row">
                                    <label class="stats-label">Subscribers playing</label>
                                    <span class="stats-value">@loyaltyData.TotalSubscribers</span>
                                </div>
                                <div class="stats-row">
                                    <label class="stats-label">Total time with active game session</label>
                                    <span class="stats-value">@FormatTime(loyaltyData.TotalStreamTime)</span>
                                </div>
                                <div class="stats-row">
                                    <label class="stats-label">Total time players been playing</label>
                                    <span class="stats-value">@FormatTime(loyaltyData.TotalPlayerTime)</span>
                                </div>
                            </div>
                        </div>

                        <div class="loyalty-users">
                            <h3>Players</h3>
                            <table class="items-list">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Name</th>
                                        <th>Level</th>
                                        <th>Gifted subs</th>
                                        <th>Cheered bits</th>
                                        <th>Play time</th>
                                        <th>Points</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in loyaltyData.UserLoyalties)
                                    {
                                        <tr id="@item.TwitchUserId" class="item-row">
                                            <td><img src="/api/twitch/logo/@(item.TwitchUserId)" style="width: 40px" /></td>
                                            <td class='item'>
                                                @if (!string.IsNullOrEmpty(item.DisplayName))
                                                {
                                                    @item.DisplayName
                                                }
                                                else
                                                {
                                                    @(item.UserName)
                                                }
                                            </td>
                                            <td class='item'>@item.Level</td>
                                            <td class='item'>@item.GiftedSubs</td>
                                            <td class='item'>@item.CheeredBits</td>
                                            <td class='item'>@FormatTime(item.TotalPlayTime)</td>
                                            <td class='item'>@item.Points</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }
            }
            break;
        case LoyaltyViewState.OtherStream:
            {
                @*<h1>Streamer Loyalty</h1>*@
                if (userLoyaltyData == null)
                {
                    <LoadIndicator></LoadIndicator>
                }
                else
                {
                    <div class="loyalty-streamer-details">
                        <h2>Earned Loyalty</h2>
                        <div class="loyalty-stats-rows">
                            <div class="stats-row points">
                                <div class="stats-label">Loyalty Points</div>
                                <div class="stats-value">@totalAvailablePoints</div>
                            </div>
                            <div class="stats-row level">
                                <div class="stats-label">Playtime</div>
                                <div class="stats-value">@FormatTime(totalPlayTime)</div>
                            </div>
                            <div class="stats-row level">
                                <div class="stats-label">Gifted Subs</div>
                                <div class="stats-value">@totalGiftedSubs</div>
                            </div>
                            <div class="stats-row level">
                                <div class="stats-label">Cheered Bits</div>
                                <div class="stats-value">@totalCheeredBits</div>
                            </div>
                        </div>

                        @if (pointRewards != null && pointRewards.Count > 0)
                        {
                            <h3>Items you can redeem using points</h3>
                            <div class="loyalty-reward-list">
                                @foreach (var reward in pointRewards.OrderBy(x => x.Points))
                                {
                                    var item = GetRewardItem(reward);
                                    <div class="reward-item @(reward.Points > totalAvailablePoints ? "locked" : "")">
                                        <div class="reward-item-icon"><img src="/imgs/items/@(item.Id).png" /></div>
                                        <div class="reward-item-details">
                                            <div class="reward-item-name">@item.Name</div>
                                            <div class="reward-item-type">@item.Type</div>
                                        </div>

                                        <button class="btn-reward-redeem" @onclick="(()=>ConfirmRewardRedeem(reward, item))">
                                            <span>
                                                Redeem for
                                            </span>
                                            <span class="reward-item-price">
                                                @reward.Points Pts
                                            </span>
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <div class="loyalty-users">
                        <h3>Streamers</h3>
                        <table class="items-list">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Name</th>
                                    <th>Level</th>
                                    <th>Gifted subs</th>
                                    <th>Cheered bits</th>
                                    <th>Play time</th>
                                    <th>Points</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in userLoyaltyData.Loyalties)
                                {
                                    <tr id="@item.StreamerTwitchUserId" class="item-row streamer">
                                        <td><img src="/api/twitch/logo/@(item.StreamerTwitchUserId)" style="width: 40px" /></td>
                                        <td class='item'>
                                            @item.Name
                                        </td>
                                        <td class='item'>@item.Level</td>
                                        <td class='item'>@item.GiftedSubs</td>
                                        <td class='item'>@item.CheeredBits</td>
                                        <td class='item'>@FormatTime(item.TotalPlayTime)</td>
                                        <td class='item'>@item.Points</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }

                @if (rewardConfirmationDialogVisible)
                {
                    <div class="reward-redeem-confirmation">
                        <div class="confirm-header">
                            <h3>Use @(selectedReward.Points * redeemAmount) to redeem @(redeemAmount > 1 ? (redeemAmount + "x ") : "") @selectedItem.Name?</h3>
                            <button class="close" @onclick="CancelRedeem">&times;</button>
                        </div>
                        <div class="confirm-body">
                            <h3>Select character to add the item to</h3>
                            <select @onchange="SelectedPlayerChanged">
                                @foreach (var c in myPlayers)
                                {
                                    if (c.Id == selectedPlayerId)
                                    {
                                        <option value="@c.Id" selected>@c.Name @(c.Identifier != null ? "(" + c.Identifier + ")" : "") #@c.CharacterIndex</option>
                                    }
                                    else
                                    {
                                        <option value="@c.Id">@c.Name @(c.Identifier != null ? "(" + c.Identifier + ")" : "") #@c.CharacterIndex</option>
                                    }
                                }
                            </select>

                            <h3>Select Amount to redeem</h3>
                            <input @bind-value="redeemAmount" type="number" min="1" />

                            <br />

                            @if (CanBuyRewards)
                            {
                                <button class="btn btn-primary" @onclick="RedeemReward">Redeem</button>
                            }
                            <button class="btn btn-danger" @onclick="CancelRedeem">Cancel</button>
                        </div>
                    </div>
                }
            }
            break;
    }
}

@code {
    private RavenNest.Sessions.SessionInfo session;
    private LoyaltyViewState viewState = LoyaltyViewState.OtherStream;
    private Services.StreamerLoyaltyData loyaltyData;
    private Services.UserLoyaltyData userLoyaltyData;
    @*private Services.StreamerLoyalty selectedStreamer;*@
    private IReadOnlyList<RavenNest.DataModels.UserLoyaltyReward> pointRewards;
    private IReadOnlyList<RavenNest.BusinessLogic.Extended.WebsitePlayer> myPlayers;

    private RavenNest.DataModels.UserLoyaltyReward selectedReward;
    private Models.Item selectedItem;
    private int redeemAmount = 1;

    private Guid? selectedPlayerId;
    private bool rewardConfirmationDialogVisible;
    private bool isStreamer;

    private long totalAvailablePoints;
    private long totalGiftedSubs;
    private long totalCheeredBits;
    private TimeSpan totalPlayTime;

    protected override async Task OnInitializedAsync()
    {
        session = AuthService.GetSession();

        if (session == null || session.UserId == null)
        {
            return;
        }

        isStreamer = await LoyaltyService.IsStreamerAsync();

        await ViewStreamers();
    }

    private void SelectedPlayerChanged(ChangeEventArgs e)
    {
        var id = e.Value?.ToString();
        if (Guid.TryParse(id, out var playerId))
            selectedPlayerId = playerId;
    }

    public bool CanBuyRewards => selectedReward?.Points * redeemAmount <= totalAvailablePoints;

    public async void RedeemReward()
    {
        if (selectedPlayerId == null || redeemAmount <= 0 || !CanBuyRewards)
            return;

        if (await LoyaltyService.RedeemRewardAsync(selectedPlayerId.Value, selectedReward, redeemAmount))
        {
            await ViewStreamers();
            CancelRedeem();
        }
    }

    public void CancelRedeem()
    {
        rewardConfirmationDialogVisible = false;
        selectedReward = null;
        selectedItem = null;
        InvokeAsync(StateHasChanged);
    }

    public void ConfirmRewardRedeem(RavenNest.DataModels.UserLoyaltyReward reward, Models.Item item)
    {
        if (myPlayers == null)
            return;

        if (reward.Points > totalAvailablePoints)
            return;

        if (selectedPlayerId == null)
        {
            selectedPlayerId = myPlayers.First().Id;
        }

        rewardConfirmationDialogVisible = true;
        selectedReward = reward;
        selectedItem = item;
    }

    private Models.Item GetRewardItem(RavenNest.DataModels.UserLoyaltyReward reward)
    {
        if (!Guid.TryParse(reward.RewardData, out var itemId))
            return null;
        return ItemService.GetItem(itemId);
    }

    private string FormatTime(TimeSpan time)
    {
        if (time.TotalSeconds < 60) return "<1 minute";
        if (time.TotalMinutes < 60)
            return (int)Math.Floor(time.TotalMinutes) + " minutes";
        if (time.TotalHours < 24)
            return Math.Round(time.TotalHours, 2) + " hours";
        return $"{time.Days} days, {time.Hours} hours, {time.Minutes} minutes";
    }

    private async Task ViewMyStream()
    {
        viewState = LoyaltyViewState.MyStream;
        loyaltyData = await LoyaltyService.GetStreamerLoyaltyDataAsync(session.UserId);
        pointRewards = await LoyaltyService.GetLoyaltyRewardsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ViewStreamers()
    {
        viewState = LoyaltyViewState.OtherStream;
        userLoyaltyData = await LoyaltyService.GetUserLoyaltyDataAsync(session.UserId);
        if (userLoyaltyData.Loyalties != null)
        {
            totalAvailablePoints = 0;
            totalGiftedSubs = 0;
            totalCheeredBits = 0;
            totalPlayTime = TimeSpan.Zero;

            foreach (var l in userLoyaltyData.Loyalties)
            {
                if (session.AccountId == l.StreamerUserId)
                    continue;

                totalCheeredBits += l.CheeredBits;
                totalGiftedSubs += l.GiftedSubs;
                totalAvailablePoints += l.Points;
                totalPlayTime += l.TotalPlayTime;
            }
        }
        myPlayers = await PlayerService.GetMyPlayersAsync();
        pointRewards = await LoyaltyService.GetLoyaltyRewardsAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (session == null || session.UserId == null)
        {
            NavigationManager.NavigateTo("/login/redirect/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        }
    }

    public enum LoyaltyViewState
    {
        MyStream,
        OtherStream
    }
}
