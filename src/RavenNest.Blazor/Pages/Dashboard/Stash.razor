@layout DashboardLayout
@page "/stash"
@page "/inventory"
@using RavenNest.Blazor.Components
@using RavenNest.Blazor.Services
@using RavenNest.BusinessLogic.Extended
@using RavenNest.Models
@using Blazored.Typeahead
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject RavenNest.Blazor.Services.UserService UserService
@inject RavenNest.Blazor.Services.ItemService ItemService
@inject NavigationManager NavigationManager

@if (session.UserId == null)
{
    <p>You don't seem to be logged in.</p>
}
else
{
    <h1>Item Stash</h1>
    <h3>The items in here are accessible between all your characters.</h3>

    @if (stash == null)
    {
        <LoadIndicator></LoadIndicator>
    }
    else if (stash.Count == 0)
    {
        <p>You don't seem to have any items in the stash yet.</p>
    }
    else
    {
        <table class="items-list">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Stats</th>
                    <th>Level Req</th>
                    <th>Category</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entry in stash)
                {
                    var item = itemLookup[entry.ItemId];

                    <tr id="@item.Id" class="item-row">
                        <td><img src="/imgs/items/@(item.Id).png" style="width: 40px" /></td>
                        <td class='item'>@(entry.Name ?? item.Name)</td>
                        <td class='item'>
                            @if (item.WeaponAim > 0)
                            {
                                <span class="item-stat" title="Weapon Aim - Increases your hit rate in melee"><i class="fas fa-crosshairs"></i>@item.WeaponAim</span>
                            }
                            @if (item.WeaponPower > 0)
                            {
                                <span class="item-stat" title="Weapon Power - Increases your maximum damage in melee"><i class="fas fa-swords"></i>@item.WeaponPower</span>
                            }
                            @if (item.RangedAim > 0)
                            {
                                <span class="item-stat" title="Ranged Aim - Increases your ranged hit rate"><i class="fas fa-crosshairs"></i>@item.RangedAim</span>
                            }
                            @if (item.RangedPower > 0)
                            {
                                <span class="item-stat" title="Ranged Power - Increases your ranged maximum damage"><i class="fas fa-bow-arrow"></i>@item.RangedPower</span>
                            }
                            @if (item.MagicAim > 0)
                            {
                                <span class="item-stat" title="Magic Aim - Increases your magic hit rate">
                                    <i class="fas fa-wand"></i>@item.MagicAim
                                </span>
                            }
                            @if (item.MagicPower > 0)
                            {
                                <span class="item-stat" title="Magic Power - Increases your magic maximum damage">
                                    <i class="fas fa-hand-holding-magic"></i>
                                    @item.MagicPower
                                </span>
                            }
                            @if (item.ArmorPower > 0)
                            {
                                <span class="item-stat" title="Armor Power - Decreases the hit rate of your attacker"><i class="fas fa-shield"></i>@item.ArmorPower</span>
                            }
                        </td>
                        <td class='item'>
                            @if (item.RequiredAttackLevel > 0)
                            {
                                <span class="item-stat" title="Required Attack Level">
                                    <i class="fas fa-swords"></i>
                                    @item.RequiredAttackLevel
                                </span>
                            }
                            @if (item.RequiredDefenseLevel > 0)
                            {
                                <span class="item-stat" title="Required Defense Level">
                                    <i class="fas fa-shield"></i>
                                    @item.RequiredDefenseLevel
                                </span>
                            }
                            @if (item.RequiredMagicLevel > 0)
                            {
                                <span class="item-stat" title="Required Magic Level">
                                    <i class="fas fa-hand-holding-magic"></i>
                                    @item.RequiredMagicLevel
                                </span>
                            }
                            @if (item.RequiredRangedLevel > 0)
                            {
                                <span class="item-stat" title="Required Ranged Level">
                                    <i class="fas fa-bow-arrow"></i>
                                    @item.RequiredRangedLevel
                                </span>
                            }
                        </td>
                        <td class='item'>@item.Category</td>
                        <td class='item'>@item.Type</td>
                        <td class='item'>@entry.Amount</td>
                        <td class='item item-actions'>
                            @if (characters != null)
                            {
                                foreach (var plr in characters)
                                {
                                    <button @onclick="()=>SendToCharacter(entry, plr)" class="btn btn-action">Send to @plr.Alias</button>
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private RavenNest.Sessions.SessionInfo session;
    private WebsiteAdminUser currentUser;
    private IReadOnlyList<RavenNest.Models.UserBankItem> stash;
    private Dictionary<Guid, RavenNest.Models.Item> itemLookup;

    private IReadOnlyList<WebsitePlayer> characters { get; set; }

    protected override async Task OnInitializedAsync()
    {
        session = AuthService.GetSession();
        characters = await PlayerService.GetMyPlayersAsync();

        if (session == null || session.UserId == null)
        {
            return;
        }

        if (session != null)
        {
            currentUser = UserService.GetCurrentUser();
        }

        if (currentUser != null)
        {
            this.stash = currentUser.Stash;
            if (stash != null)
            {
                this.itemLookup = stash.Select(x => x.ItemId).Distinct().Select(ItemService.GetItem).ToDictionary(x => x.Id, x => x);
            }
        }

        if (stash == null)
        {
            stash = new List<RavenNest.Models.UserBankItem>();
        }

    }

    public void SendToCharacter(RavenNest.Models.UserBankItem item, WebsitePlayer targetCharacter)
    {
        PlayerService.SendToCharacter(targetCharacter.Id, item);

        currentUser = UserService.GetCurrentUser();

        if (currentUser != null)
        {
            this.stash = currentUser.Stash;
            if (stash != null)
            {
                this.itemLookup = stash.Select(x => x.ItemId).Distinct().Select(ItemService.GetItem).ToDictionary(x => x.Id, x => x);
            }
        }

        if (stash == null)
        {
            stash = new List<RavenNest.Models.UserBankItem>();
        }

        InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (session == null || session.UserId == null)
        {
            NavigationManager.NavigateTo("/login/redirect/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        }
    }
}
