@layout DashboardLayout
@page "/stash"
@page "/inventory"
@using RavenNest.Blazor.Components
@using RavenNest.Blazor.Services
@using RavenNest.BusinessLogic.Extended
@using RavenNest.BusinessLogic.Game
@using RavenNest.Models
@using Blazored.Typeahead
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject RavenNest.Blazor.Services.UserService UserService
@inject RavenNest.Blazor.Services.ItemService ItemService
@inject NavigationManager NavigationManager

<h1 class="page-title">Item Stash</h1>

@if (!session.Authenticated)
{
            <p>You don't seem to be logged in.</p>
}
else
{
            <h3>The items in here are accessible between all your characters.</h3>

    @if (stash == null)
    {
                        <LoadIndicator></LoadIndicator>
    }
    else
    {
                        <div class="stash item-filters">
                            <button class="item-filter @(itemFilter == ItemFilter.All ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.All)">
                                <span class="item-filter-text">All</span>
                                <i class="fa-sharp fa-solid fa-rectangles-mixed"></i>
                            </button>
                            <button class="item-filter @(itemFilter == ItemFilter.Swords ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Swords)">
                                <span class="item-filter-text">Swords</span>
                                <i class="fa-sharp fa-solid fa-sword"></i>
                            </button>
                            <button class="item-filter @(itemFilter == ItemFilter.Axes ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Axes)">
                                <span class="item-filter-text">Axes</span>
                                <i class="fa-sharp fa-solid fa-axe"></i>
                            </button>
                            <button class="item-filter @(itemFilter == ItemFilter.Spears ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Spears)">
                                <span class="item-filter-text">Spears</span>
                                <i class="fa-solid fa-scythe"></i>
                            </button>
                            <button class="item-filter @(itemFilter == ItemFilter.Bows ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Bows)">
                                <span class="item-filter-text">Bows</span>
                                <i class="fa-sharp fa-solid fa-bow-arrow"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Staves ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Staves)">
                                <span class="item-filter-text">Staves</span>
                                <i class="fa-sharp fa-solid fa-staff"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Shields ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Shields)">
                                <span class="item-filter-text">Shields</span>
                                <i class="fa-sharp fa-solid fa-shield"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Armors ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Armors)">
                                <span class="item-filter-text">Armors</span>
                                <i class="fa-sharp fa-solid fa-helmet-battle"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Accessories ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Accessories)">
                                <span class="item-filter-text">Accessories</span>
                                <i class="fa-sharp fa-solid fa-gem"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Pets ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Pets)">
                                <span class="item-filter-text">Pets</span>
                                <i class="fa-sharp fa-solid fa-dog"></i>
                            </button>


                            <button class="item-filter @(itemFilter == ItemFilter.Scrolls ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Scrolls)">
                                <span class="item-filter-text">Scrolls</span>
                                <i class="fa-sharp fa-solid fa-scroll"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Woodcutting ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Woodcutting)">
                                <span class="item-filter-text">Woodcutting</span>
                                <i class="fa-solid fa-tree"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Mining ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Mining)">
                                <span class="item-filter-text">Mining</span>
                                <i class="fa-solid fa-pickaxe"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Fishing ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Fishing)">
                                <span class="item-filter-text">Fishing</span>
                                <i class="fa-sharp fa-solid fa-fishing-rod"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Farming ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Farming)">
                                <span class="item-filter-text">Farming</span>
                                <i class="fa-solid fa-wheat"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Gathering ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Gathering)">
                                <span class="item-filter-text">Gathering</span>
                                <i class="fa-solid fa-mushroom"></i>
                            </button>
                            <button class="item-filter @(itemFilter == ItemFilter.Crafting ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Crafting)">
                                <span class="item-filter-text">Crafting</span>
                                <i class="fa-sharp fa-solid fa-hammer"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Cooking ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Cooking)">
                                <span class="item-filter-text">Cooking</span>
                                <i class="fa-sharp fa-solid fa-user-chef"></i>
                            </button>

                            <button class="item-filter @(itemFilter == ItemFilter.Alchemy ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Alchemy)">
                                <span class="item-filter-text">Alchemy</span>
                                <i class="fa-sharp fa-solid fa-flask-round-potion"></i>
                            </button>
                        </div>

        if (stashFiltered.Count == 0)
        {
                                    <p>Looks quite empty in here.</p>
        }
        else
        {
                                    <table class="items-list stash">
                                        <thead>
                                            <tr>
                                                <th></th>

                                                <th @onclick="SortByName">Name <span>@GetIndicator("name")</span></th>
                                                <th @onclick="SortByStats">Stats <span>@GetIndicator("stats")</span></th>
                                                <th @onclick="SortByLevelReq">Level Req <span>@GetIndicator("lev-req")</span></th>
                                                <th class="stash-item-category" @onclick="SortByCategory">Category <span>@GetIndicator("category")</span></th>
                                                <th class="stash-item-type" @onclick="SortByType">Item Type <span>@GetIndicator("type")</span></th>
                                                <th class="stash-item-material" @onclick="SortByMaterial">Material Type <span>@GetIndicator("material")</span></th>

                                                <th>Transfer to</th>
                        @*<th>Vendor</th>*@
                                            </tr>
                                        </thead>
                                        <tbody>
                    @foreach (var entry in stashFiltered)
                    {
                        var item = itemLookup[entry.ItemId];

                                                        <tr id="@item.Id" class="item-row">
                                                            <td class='item image'>
                                                                <img src="@(ItemService.GetItemImage(item.Id.ToString(), item.Name))" style="width: 40px" />
                                                                <div class="stash-item-amount">@entry.Amount</div>
                                                            </td>
                                                            <td class='item name'>@((entry.Name ?? item.Name))</td>
                                                            <td class='item stats'>
                                @if (item.WeaponAim > 0)
                                {
                                                                            <span class="item-stat" title="Weapon Aim - Increases your hit rate in melee"><i class="fas fa-crosshairs"></i>@item.WeaponAim</span>
                                }
                                @if (item.WeaponPower > 0)
                                {
                                                                            <span class="item-stat" title="Weapon Power - Increases your maximum damage in melee"><i class="fas fa-swords"></i>@item.WeaponPower</span>
                                }
                                @if (item.RangedAim > 0)
                                {
                                                                            <span class="item-stat" title="Ranged Aim - Increases your ranged hit rate"><i class="fas fa-crosshairs"></i>@item.RangedAim</span>
                                }
                                @if (item.RangedPower > 0)
                                {
                                                                            <span class="item-stat" title="Ranged Power - Increases your ranged maximum damage"><i class="fas fa-bow-arrow"></i>@item.RangedPower</span>
                                }
                                @if (item.MagicAim > 0)
                                {
                                                                            <span class="item-stat" title="Magic Aim - Increases your magic hit rate">
                                                                                <i class="fas fa-wand"></i>@item.MagicAim
                                                                            </span>
                                }
                                @if (item.MagicPower > 0)
                                {
                                                                            <span class="item-stat" title="Magic Power - Increases your magic maximum damage">
                                                                                <i class="fas fa-hand-holding-magic"></i>
                                        @item.MagicPower
                                                                            </span>
                                }
                                @if (item.ArmorPower > 0)
                                {
                                                                            <span class="item-stat" title="Armor Power - Decreases the hit rate of your attacker"><i class="fas fa-shield"></i>@item.ArmorPower</span>
                                }
                                                            </td>
                                                            <td class='item requirement'>
                                @if (item.RequiredSlayerLevel > 0)
                                {
                                                                            <span class="item-stat" title="Required Slayer Level">
                                                                                <i class="fas fa-skull"></i>
                                        @item.RequiredSlayerLevel
                                                                            </span>
                                }
                                @if (item.RequiredAttackLevel > 0)
                                {
                                                                            <span class="item-stat" title="Required Attack Level">
                                                                                <i class="fas fa-swords"></i>
                                        @item.RequiredAttackLevel
                                                                            </span>
                                }
                                @if (item.RequiredDefenseLevel > 0)
                                {
                                                                            <span class="item-stat" title="Required Defense Level">
                                                                                <i class="fas fa-shield"></i>
                                        @item.RequiredDefenseLevel
                                                                            </span>
                                }
                                @if (item.RequiredMagicLevel > 0)
                                {
                                                                            <span class="item-stat" title="Required Magic or Healing Level">
                                                                                <i class="fas fa-hand-holding-magic"></i>
                                        @item.RequiredMagicLevel
                                                                            </span>
                                }
                                @if (item.RequiredRangedLevel > 0)
                                {
                                                                            <span class="item-stat" title="Required Ranged Level">
                                                                                <i class="fas fa-bow-arrow"></i>
                                        @item.RequiredRangedLevel
                                                                            </span>
                                }
                                                            </td>
                                                            <td class='item stash-item-category'>@item.Category</td>
                                                            <td class='item stash-item-type'>@ItemService.GetTypeName(item)</td>
                                                            <td class='item stash-item-material'>@ItemService.GetMaterialName(item)</td>
                            @*<td class='item amount'>@entry.Amount</td>*@
                                                            <td class='item item-actions'>
                                @if (characters != null)
                                {
                                    foreach (var plr in characters)
                                    {
                                      <button @onclick="()=>ShowSendToCharacter(entry, plr)" class="btn btn-action">@plr.Alias</button>
                                    }
                                }
                                                            </td>
                            @*
                              <td class='item item-actions'>
                                <button @onclick="()=> Vendor(entry)" class="btn btn-action vendor">@("Vendor " + (entry.Amount > 1 ? entry.Amount + " " : ""))</button>
                              </td>
                            *@
                                                        </tr>
                    }
                                        </tbody>
                                    </table>
        }


        @if (sendToCharacterDialogVisible)
        {
                                <div class="item-details-dialog-container send-to-character">
                              <div class="item-details-dialog-background" @onclick="HideSendToCharacter"></div>
                              <div class="item-details-dialog vendor">
                                  <div class="dialog-header">
                                      <h3>Transfer @GetItemName(itemToSend)</h3>
                                  </div>
                                  <div class="item-details-content vendor">
                                  @if (canSendMany)
                                  {
                                    <div class="amount-inputs">
                                        <label>Amount:</label>
                                        <input @bind="amountToSend" type="number" min="1" max="@itemToSend.Amount" />
                                        <div class="quick-buttons">
                                              @foreach (var amount in quickButtons)
                                              {
                                                  <button @onclick="() => SetSendAmount(amount)" class="btn btn-action btn-quick">
                                                      @(amount == itemToSend.Amount ? $"{amount} (All)" : $"{amount}")
                                                   </button>
                                              }
                                          </div>
                                      </div>
                                  }
                                      <div class="summary-block">
                                          <p>You are about to send <strong>@amountToSend</strong> @GetItemName(itemToSend) to <strong>@targetCharacter.Alias</strong>.</p>
                                      </div>
                                      <div class="warning-row">Are you sure you want to continue?</div>
                                  </div>
                                  <div class="item-actions">
                                      <button @onclick="HideSendToCharacter" class="btn btn-action">Cancel</button>
                                      <button @onclick="SendItems" class="btn btn-action vendor">Confirm</button>
                                  </div>
                              </div>
                          </div>
        }

    }

}

@code {
    private SessionInfo session;
    private WebsiteAdminUser currentUser;
    private IReadOnlyList<RavenNest.Models.UserBankItem> stash;
    private IReadOnlyList<RavenNest.Models.UserBankItem> stashFiltered;
    private Dictionary<Guid, RavenNest.Models.Item> itemLookup;

    private IReadOnlyList<WebsitePlayer> characters { get; set; }

    private bool sorting;
    private string sort = "name";
    private BusinessLogic.Game.SortDirection sortDirection;
    private ItemFilter itemFilter = ItemFilter.All;

    private RavenNest.Models.UserBankItem itemToSend;
    private WebsitePlayer targetCharacter;

    private bool sendToCharacterDialogVisible;
    private bool canSendMany;
    private long amountToSend;

    private List<long> quickButtons = new();

    private void UpdateQuickButtons()
    {
        quickButtons.Clear();
        if (itemToSend == null)
        {
            return;
        }

        var maxAmount = itemToSend.Amount;
        if (maxAmount == 1)
        {
            return;
        }

        if (maxAmount > 1000)
        {
            quickButtons.Add(1000);
            if (maxAmount > 10000) quickButtons.Add(10000);
            if (maxAmount > 50000) quickButtons.Add(50000);
            if (maxAmount > 100000) quickButtons.Add(100000);
        }
        else
        {
            if (maxAmount > 1) quickButtons.Add(1);
            if (maxAmount > 2) quickButtons.Add(2);
            if (maxAmount > 5) quickButtons.Add(5);
            if (maxAmount > 10) quickButtons.Add(10);
        }

        if (maxAmount > 0)
        {
            quickButtons.Add(maxAmount); // Add the "All" button
        }
    }

    protected override async Task OnInitializedAsync()
    {
        session = AuthService.GetSession();
        characters = await PlayerService.GetMyPlayersAsync();

        if (session == null || !session.Authenticated)
        {
            return;
        }

        UpdateStashItems();
    }

    private void SelectItemFilter(ItemFilter newItemFilter)
    {
        itemFilter = newItemFilter;
        stashFiltered = stash.Where(Filter).ToList();
        InvokeAsync(StateHasChanged);
    }

    private bool Filter(UserBankItem item)
    {
        if (itemFilter == ItemFilter.All)
            return true;

        return ItemService.GetItemFilter(item.ItemId) == itemFilter;
    }

    public void Vendor(RavenNest.Models.UserBankItem item)
    {
        // unfortunately we need a character to put the coins in, vendor has to wait.
        //PlayerService.Vendor(targetCharacter.Id, item, item.Amount);
        //UpdateStashItems();
        //InvokeAsync(StateHasChanged);
    }


    public void ShowSendToCharacter(RavenNest.Models.UserBankItem item, WebsitePlayer targetCharacter)
    {
        this.targetCharacter = targetCharacter;
        sendToCharacterDialogVisible = true;
        canSendMany = item.Amount > 1;
        itemToSend = item;
        amountToSend = item.Amount;
        UpdateQuickButtons();
    }

    public string GetItemName(RavenNest.Models.UserBankItem i)
    {

        if (i == null) return null;
        return i.Name ?? ItemService.GetItem(i.ItemId)?.Name;
    }

    public void SetSendAmount(long amount)
    {
        amountToSend = amount;
    }

    public void SendItems()
    {
        if (!PlayerService.SendToCharacter(targetCharacter.Id, itemToSend, amountToSend))
        {
            return;
        }

        sendToCharacterDialogVisible = false;

        UpdateStashItems();
        InvokeAsync(StateHasChanged);
    }

    public void HideSendToCharacter()
    {
        sendToCharacterDialogVisible = false;
    }

    // public void SendToCharacter(RavenNest.Models.UserBankItem item, WebsitePlayer targetCharacter)
    // {
    //     PlayerService.SendToCharacter(targetCharacter.Id, item);
    //     UpdateStashItems();
    //     InvokeAsync(StateHasChanged);
    // }

    protected override void OnAfterRender(bool firstRender)
    {
        if (session == null || !session.Authenticated)
        {
            NavigationManager.NavigateTo("/login/redirect/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        }
    }

    private void UpdateStashItems()
    {
        if (session != null)
        {
            currentUser = UserService.GetCurrentUser();
        }

        if (currentUser != null)
        {
            this.stash = currentUser.Stash;
            if (stash != null)
            {
                this.itemLookup = stash.Select(x => x.ItemId).Distinct().Select(ItemService.GetItem).ToDictionary(x => x.Id, x => x);
            }
        }

        if (stash == null)
        {
            stash = new List<RavenNest.Models.UserBankItem>();
        }

        stashFiltered = stash.Where(Filter).ToList();
    }



    private MarkupString GetIndicator(string value)
    {
        if (value != sort)
        {
            return (MarkupString)"";
        }

        return (MarkupString)(sortDirection == BusinessLogic.Game.SortDirection.Ascending ? "&uarr;" : "&darr;");
    }

    private async void SortByName()
    {
        SetSorting("name");
        await SortBy((b, x) => b.Name ?? x.Name);
    }

    private async void SortByLevelReq()
    {
        SetSorting("lev-req");
        await SortBy((b, x) => (x.RequiredAttackLevel + x.RequiredDefenseLevel + x.RequiredMagicLevel + x.RequiredRangedLevel + x.RequiredSlayerLevel));
    }

    private async void SortByCategory()
    {
        SetSorting("category");
        await SortBy((b, x) => (int)x.Category);
    }

    private async void SortByType()
    {
        SetSorting("type");
        await SortBy((b, x) => (int)x.Type);
    }
    private async void SortByMaterial()
    {
        SetSorting("material");
        await SortBy((b, x) => ItemService.GetMaterialIndex(x));
    }

    private async void SortByStats()
    {
        SetSorting("stats");

        // NOTE: Not sorted by enchantment bonus yet.
        await SortBy((b, x) => (x.ArmorPower + x.MagicPower + x.RangedPower + x.WeaponPower + x.MagicAim + x.RangedAim + x.WeaponAim));
    }

    private async Task SortBy<T>(Func<UserBankItem, Models.Item, T> sort)
    {
        try
        {
            sorting = true;
            await Task.Run(() =>
            {
                if (sortDirection == BusinessLogic.Game.SortDirection.Descending)
                {
                    stashFiltered = stashFiltered.OrderByDescending(x => sort(x, ItemService.GetItem(x.ItemId))).ToList();
                    return;
                }
                stashFiltered = stashFiltered.OrderBy(x => sort(x, ItemService.GetItem(x.ItemId))).ToList();
            });
        }
        finally
        {
            sorting = false;
            StateHasChanged();
        }
    }

    private void SetSorting(string value)
    {
        if (sort != value)
        {
            sortDirection = BusinessLogic.Game.SortDirection.Ascending;
        }
        else
        {
            sortDirection = (BusinessLogic.Game.SortDirection)(((int)sortDirection + 1) % Enum.GetValues(typeof(BusinessLogic.Game.SortDirection)).Length);
        }
        sort = value;
    }


}
