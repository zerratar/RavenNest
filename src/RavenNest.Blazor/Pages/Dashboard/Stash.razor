@layout DashboardLayout
@page "/stash"
@page "/inventory"
@using RavenNest.Blazor.Components
@using RavenNest.Blazor.Services
@using RavenNest.BusinessLogic.Extended
@using RavenNest.Blazor.Services
@using RavenNest.Models
@using Blazored.Typeahead
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject RavenNest.Blazor.Services.UserService UserService
@inject RavenNest.Blazor.Services.ItemService ItemService
@inject NavigationManager NavigationManager

<h1 class="page-title">Item Stash</h1>

@if (session.UserId == null)
{
    <p>You don't seem to be logged in.</p>
}
else
{
    <h3>The items in here are accessible between all your characters.</h3>

    @if (stash == null)
    {
        <LoadIndicator></LoadIndicator>
    }
    else
    {
        <div class="stash item-filters">
            <button class="item-filter @(itemFilter == ItemFilter.All ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.All)">
                <span class="item-filter-text">All</span>
                <i class="fa-sharp fa-solid fa-rectangles-mixed"></i>
            </button>
            <button class="item-filter @(itemFilter == ItemFilter.Swords ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Swords)">
                <span class="item-filter-text">Swords</span>
                <i class="fa-sharp fa-solid fa-sword"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Bows ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Bows)">
                <span class="item-filter-text">Bows</span>
                <i class="fa-sharp fa-solid fa-bow-arrow"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Staves ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Staves)">
                <span class="item-filter-text">Staves</span>
                <i class="fa-sharp fa-solid fa-staff"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Shields ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Shields)">
                <span class="item-filter-text">Shields</span>
                <i class="fa-sharp fa-solid fa-shield"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Armors ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Armors)">
                <span class="item-filter-text">Armors</span>
                <i class="fa-sharp fa-solid fa-helmet-battle"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Accessories ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Accessories)">
                <span class="item-filter-text">Accessories</span>
                <i class="fa-sharp fa-solid fa-gem"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Pets ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Pets)">
                <span class="item-filter-text">Pets</span>
                <i class="fa-sharp fa-solid fa-dog"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Resources ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Resources)">
                <span class="item-filter-text">Resources</span>
                <i class="fa-sharp fa-solid fa-hammer"></i>
            </button>


            <button class="item-filter @(itemFilter == ItemFilter.Scrolls ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Scrolls)">
                <span class="item-filter-text">Scrolls</span>
                <i class="fa-sharp fa-solid fa-scroll"></i>
            </button>
        </div>

        if (stashFiltered.Count == 0)
        {
            <p>Looks quite empty in here.</p>
        }
        else
        {
            <table class="items-list stash">
                <thead>
                    <tr>
                        <th></th>
                        <th>Name</th>
                        <th>Stats</th>
                        <th>Lv Req</th>
                        @*<th>Category</th>
                            <th>Type</th>*@
                        @*<th>Amount</th>*@
                        <th>Transfer to</th>
                        @*<th>Vendor</th>*@
                    </tr>
                </thead>
                <tbody>
                    @foreach (var entry in stashFiltered)
                    {
                        var item = itemLookup[entry.ItemId];

                        <tr id="@item.Id" class="item-row">
                            <td class='item image'>
                                <img src="/imgs/items/@(item.Id).png" style="width: 40px" />
                                <div class="stash-item-amount">@entry.Amount</div>
                            </td>
                            <td class='item name'>@((entry.Name ?? item.Name))</td>
                            <td class='item stats'>
                                @if (item.WeaponAim > 0)
                                {
                                    <span class="item-stat" title="Weapon Aim - Increases your hit rate in melee"><i class="fas fa-crosshairs"></i>@item.WeaponAim</span>
                                }
                                @if (item.WeaponPower > 0)
                                {
                                    <span class="item-stat" title="Weapon Power - Increases your maximum damage in melee"><i class="fas fa-swords"></i>@item.WeaponPower</span>
                                }
                                @if (item.RangedAim > 0)
                                {
                                    <span class="item-stat" title="Ranged Aim - Increases your ranged hit rate"><i class="fas fa-crosshairs"></i>@item.RangedAim</span>
                                }
                                @if (item.RangedPower > 0)
                                {
                                    <span class="item-stat" title="Ranged Power - Increases your ranged maximum damage"><i class="fas fa-bow-arrow"></i>@item.RangedPower</span>
                                }
                                @if (item.MagicAim > 0)
                                {
                                    <span class="item-stat" title="Magic Aim - Increases your magic hit rate">
                                        <i class="fas fa-wand"></i>@item.MagicAim
                                    </span>
                                }
                                @if (item.MagicPower > 0)
                                {
                                    <span class="item-stat" title="Magic Power - Increases your magic maximum damage">
                                        <i class="fas fa-hand-holding-magic"></i>
                                        @item.MagicPower
                                    </span>
                                }
                                @if (item.ArmorPower > 0)
                                {
                                    <span class="item-stat" title="Armor Power - Decreases the hit rate of your attacker"><i class="fas fa-shield"></i>@item.ArmorPower</span>
                                }
                            </td>
                            <td class='item requirement'>
                                @if (item.RequiredAttackLevel > 0)
                                {
                                    <span class="item-stat" title="Required Attack Level">
                                        <i class="fas fa-swords"></i>
                                        @item.RequiredAttackLevel
                                    </span>
                                }
                                @if (item.RequiredDefenseLevel > 0)
                                {
                                    <span class="item-stat" title="Required Defense Level">
                                        <i class="fas fa-shield"></i>
                                        @item.RequiredDefenseLevel
                                    </span>
                                }
                                @if (item.RequiredMagicLevel > 0)
                                {
                                    <span class="item-stat" title="Required Magic Level">
                                        <i class="fas fa-hand-holding-magic"></i>
                                        @item.RequiredMagicLevel
                                    </span>
                                }
                                @if (item.RequiredRangedLevel > 0)
                                {
                                    <span class="item-stat" title="Required Ranged Level">
                                        <i class="fas fa-bow-arrow"></i>
                                        @item.RequiredRangedLevel
                                    </span>
                                }
                            </td>
                            @*                        <td class='item'>@item.Category</td>
                                <td class='item'>@item.Type</td>*@
                            @*<td class='item amount'>@entry.Amount</td>*@
                            <td class='item item-actions'>
                                @if (characters != null)
                                {
                                    foreach (var plr in characters)
                                    {
                                        <button @onclick="()=>SendToCharacter(entry, plr)" class="btn btn-action">@plr.Alias</button>
                                    }
                                }
                            </td>
@*                             <td class='item item-actions'>
                               <button @onclick="()=> Vendor(entry)" class="btn btn-action vendor">@("Vendor " + (entry.Amount > 1 ? entry.Amount + " " : ""))</button>
                            </td>*@
                        </tr>
                    }
                </tbody>
            </table>
        }

    }

}

@code {
    private RavenNest.Sessions.SessionInfo session;
    private WebsiteAdminUser currentUser;
    private IReadOnlyList<RavenNest.Models.UserBankItem> stash;
    private IReadOnlyList<RavenNest.Models.UserBankItem> stashFiltered;
    private Dictionary<Guid, RavenNest.Models.Item> itemLookup;

    private IReadOnlyList<WebsitePlayer> characters { get; set; }

    private ItemFilter itemFilter = ItemFilter.All;

    protected override async Task OnInitializedAsync()
    {
        session = AuthService.GetSession();
        characters = await PlayerService.GetMyPlayersAsync();

        if (session == null || session.UserId == null)
        {
            return;
        }

        UpdateStashItems();
    }

    private void SelectItemFilter(ItemFilter newItemFilter)
    {
        itemFilter = newItemFilter;
        stashFiltered = stash.Where(Filter).ToList();
        InvokeAsync(StateHasChanged);
    }

    private bool Filter(UserBankItem item)
    {
        if (itemFilter == ItemFilter.All)
            return true;

        return GetItemFilter(item.ItemId) == itemFilter;
    }

    private ItemFilter GetItemFilter(Guid itemId)
    {
        var item = ItemService.GetItem(itemId);
        if (item.Type == ItemType.Coins || item.Type == ItemType.Ore || item.Type == ItemType.Wood || item.Type == ItemType.Fish)
            return ItemFilter.Resources;

        if (item.Type == ItemType.OneHandedSword || item.Type == ItemType.TwoHandedSword)
            return ItemFilter.Swords;
        if (item.Type == ItemType.TwoHandedBow) return ItemFilter.Bows;
        if (item.Type == ItemType.TwoHandedStaff) return ItemFilter.Staves;
        if (item.Type == ItemType.Ring || item.Type == ItemType.Amulet) return ItemFilter.Accessories;
        if (item.Type == ItemType.Shield) return ItemFilter.Shields;
        if (item.Type == ItemType.Pet) return ItemFilter.Pets;
        if (item.Type == ItemType.Scroll) return ItemFilter.Scrolls;

        if (item.Category == ItemCategory.Armor)
            return ItemFilter.Armors;

        return ItemFilter.All;
    }



    public void Vendor(RavenNest.Models.UserBankItem item)
    {
        // unfortunately we need a character to put the coins in, vendor has to wait.
        //PlayerService.Vendor(targetCharacter.Id, item, item.Amount);
        //UpdateStashItems();
        //InvokeAsync(StateHasChanged);
    }

    public void SendToCharacter(RavenNest.Models.UserBankItem item, WebsitePlayer targetCharacter)
    {
        PlayerService.SendToCharacter(targetCharacter.Id, item);
        UpdateStashItems();
        InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (session == null || session.UserId == null)
        {
            NavigationManager.NavigateTo("/login/redirect/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        }
    }
    
    private void UpdateStashItems()
    {
        if (session != null)
        {
            currentUser = UserService.GetCurrentUser();
        }

        if (currentUser != null)
        {
            this.stash = currentUser.Stash;
            if (stash != null)
            {
                this.itemLookup = stash.Select(x => x.ItemId).Distinct().Select(ItemService.GetItem).ToDictionary(x => x.Id, x => x);
            }
        }

        if (stash == null)
        {
            stash = new List<RavenNest.Models.UserBankItem>();
        }

        stashFiltered = stash.Where(Filter).ToList();
    }

}
