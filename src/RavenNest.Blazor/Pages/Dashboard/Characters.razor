@layout DashboardLayout
@using RavenNest.Models
@using RavenNest.BusinessLogic.Extended
@page "/characters"
@page "/characters/{index}"
@page "/character/{characterId}"
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject NavigationManager NavigationManager


@if (players == null && selectedPlayer == null)
{
  <LoadIndicator></LoadIndicator>
}
else
{
  <div class="character-view-tabs character-selection">
    @foreach (var p in players)
    {
      <button class="tab-link @(p.Id == selectedPlayer?.Id ? "active" : "")" @onclick="(()=> SelectPlayer(p))">
        <div class="character-name">
          @p.Name
        </div>
        <div class="character-index">
          @p.CharacterIndex  @(p.Identifier != null ? $"({p.Identifier})" : "")
        </div>
        <div class="character-level">
          @PlayerService.GetCombatLevel(p)
        </div>
      </button>
    }
  </div>

  if (selectedPlayer != null)
  {
    <PlayerView SelectedPlayer="selectedPlayer" CanManage="true"></PlayerView>
  }
}

@code {

  [Parameter]
  public string Index { get; set; }

  [Parameter]
  public string CharacterId { get; set; }

  private WebsitePlayer selectedPlayer;
  private IReadOnlyList<WebsitePlayer> players;
  private RavenNest.Sessions.SessionInfo session;

  protected override async Task OnInitializedAsync()
  {
    session = AuthService.GetSession();
    if (CharacterId != null && Guid.TryParse(CharacterId, out var guid))
    {
      selectedPlayer = await PlayerService.GetPlayerAsync(guid);
    }
    else if (Index != null && int.TryParse(Index, out var i))
    {
      selectedPlayer = await PlayerService.GetMyPlayerByIndexAsync(i);
    }
    players = await PlayerService.GetMyPlayersAsync();
    selectedPlayer = players.FirstOrDefault();
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if (session.UserId == null && selectedPlayer == null)
    {
      NavigationManager.NavigateTo("/login");
    }
  }

  private void SelectPlayer(WebsitePlayer player)
  {
    selectedPlayer = player;
  }

}
