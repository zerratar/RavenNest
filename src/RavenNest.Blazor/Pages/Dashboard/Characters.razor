@layout DashboardLayout
@using RavenNest.Models
@using RavenNest.BusinessLogic.Extended
@page "/characters"
@page "/characters/{index:int?}"
@page "/character/{characterId?}"
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject NavigationManager NavigationManager

<h1 class="page-title">My Characters</h1>

@if (players == null || selectedPlayer == null)
{
    <LoadIndicator></LoadIndicator>
}
else
{
    <div class="tab-view character-selection">
        @foreach (var p in players)
        {
            <button class="tab-link @(p.Id == selectedPlayer?.Id ? "active" : "")" @onclick="(()=> SelectPlayer(p))">
                <div class="character-name">
                    @p.Name
                </div>
                <div class="character-index">
                    @p.CharacterIndex  @(p.Identifier != null ? $"({p.Identifier})" : "")
                </div>
                <div class="character-level">
                    @PlayerService.GetCombatLevel(p)
                </div>
            </button>
        }
    </div>

    if (selectedPlayer != null)
    {
        <PlayerView SelectedPlayer="selectedPlayer" CanManage="true" ShowPlayerName="false"></PlayerView>
    }
}

@code {

    [Parameter]
    public int? Index { get; set; }

    [Parameter]
    public string CharacterId { get; set; }

    private WebsitePlayer selectedPlayer;
    private IReadOnlyList<WebsitePlayer> players;
    private RavenNest.Sessions.SessionInfo session;

    protected override void OnInitialized()
    {
        session = AuthService.GetSession();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (session == null || session.TwitchUserId == null)
            return;

        players = await PlayerService.GetMyPlayersAsync();

        if (CharacterId != null && Guid.TryParse(CharacterId, out var guid))
        {
            selectedPlayer = await PlayerService.GetPlayerAsync(guid);
        }
        else if (Index != null)
        {
            selectedPlayer = await PlayerService.GetMyPlayerByIndexAsync(Index ?? 0);
        } 
        if(selectedPlayer == null)
        {
           selectedPlayer = players.FirstOrDefault(); 
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (session == null || session.TwitchUserId == null && selectedPlayer == null)
        {
            NavigationManager.NavigateTo("/login/redirect/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        }
    }

    private async void SelectPlayer(WebsitePlayer player)
    {
        selectedPlayer = await PlayerService.GetPlayerAsync(player.Id);
        await InvokeAsync(StateHasChanged);
    }
}
