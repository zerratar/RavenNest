@layout DashboardLayout
@page "/patreon"
@page "/patreon/link"
@using RavenNest.Blazor.Services.Models
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.PatreonService PatreonService

<h1 class="page-title">Patreon</h1>

@if (session.UserId == null)
{
    <p>You don't seem to be logged in.</p>
}
else
{
    if (session.Patreon != null && !string.IsNullOrEmpty(session.Patreon.AccessToken))
    {
        <div class="content-box">
            <div class="patreon-details">
                <div class="patreon-profile">
                    @if (!string.IsNullOrEmpty(session.Patreon.ProfilePicture))
                    {
                        <img class="profile-image" src="@session.Patreon.ProfilePicture" />
                    }
                    else
                    {
                        <img class="profile-image" src="/api/twitch/logo/@session.UserId" />
                    }

                    <div class="patreon-profile-details">
                        <h2 class="patreon-name">@session.Patreon.FullName</h2>
                        <h3 class="patreon-tier">@patreonTitle</h3>
                    </div>
                </div>
                <div class="patreon-rewards">
                    @if (patreonTierIndex == 0)
                    {
                        <p>We can see that you're not a Patron yet, become one now to unlock additional rewards in Ravenfall! If you're already a patron but not showing up here, try 'Unlink' and connect with Patreon again.</p>
                        <a href="https://www.patreon.com/ravenfall" target="_blank">Visit our Patreon page!</a>
                    }
                    else
                    {
                        <h4>Thanks for being a patron!</h4>
                        <p>You have unlocked the following rewards</p>
                        <ul class="patreon-reward-list">
                            <li class="patreon-reward clans">You can create clans</li>
                            @if (patreonTierIndex == 1)
                            {
                                <li class="patreon-reward xp-x2">2x Exp Multiplier</li>
                            }
                            @if (patreonTierIndex == 3)
                            {
                                <li class="patreon-reward xp-x3">3x Exp Multiplier</li>
                            }
                            @if (patreonTierIndex > 3)
                            {
                                <li class="patreon-reward xp-x5">5x Exp Multiplier</li>
                            }
                        </ul>
                    }
                </div>
            </div>

            <div class="patreon-actions">
                <p>Want to remove your Patreon Link? (This won't remove your rewards, only stored tokens)</p>
                <button class="btn-new error" @onclick="RemovePatreonLink"><i class="fab fa-patreon"></i>&nbsp;&nbsp;Unlink</button>
            </div>
        </div>

    }
    else
    {
        <p>You don't seem to have linked your Patreon account to your Ravenfall account yet.</p>
        <button class="btn-new" @onclick="LoginToPatreon"><i class="fab fa-patreon"></i>&nbsp;Link Patreon</button>
    }
}

@code {
    private RavenNest.Sessions.SessionInfo session;
    private bool patreonLinkInitiated;

    private bool IsLinkingPatreon => NavigationManager.Uri.Contains("patreon/link", StringComparison.OrdinalIgnoreCase);

    private string patreonTitle;
    private int patreonTierIndex;
    private bool reloadAfterRender;

    protected override async Task OnInitializedAsync()
    {
        session = AuthService.GetSession();

        if (session.Patreon != null)
        {
            patreonTierIndex = System.Math.Max(session.Tier, session.Patreon.Tier.GetValueOrDefault());
            patreonTitle = session.Patreon.PledgeTitle;
            if (string.IsNullOrEmpty(patreonTitle) && patreonTierIndex > 0)
            {
                patreonTitle = await GetPatreonTitleByTierAsync(patreonTierIndex);
            }
        }

        await HandlePatreonToken();
    }

    private async Task HandlePatreonToken()
    {
        reloadAfterRender = false;

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryString = uri.Query;
        if (string.IsNullOrEmpty(queryString))
        {
            return;
        }

        var atn = "code";
        queryString = queryString.Substring(1);
        var parsedQuery = System.Web.HttpUtility.ParseQueryString(queryString);

        var code = parsedQuery.Get(atn);
        var error = parsedQuery.Get("error");
        var state = parsedQuery.Get("state");
        var error_description = parsedQuery.Get("error_description");

        if (!string.IsNullOrEmpty(code))
        {
            var result = await PatreonService.LinkAsync(code);
            if (result != null)
            {
                session.Patreon = result;
            }
        }

        reloadAfterRender = true;
    }


    private async Task<string> GetPatreonTitleByTierAsync(int tierLevel)
    {
        var tier = await PatreonService.GetPatreonTierAsync(tierLevel);
        if (tier != null)
        {
            return tier.Title;
        }

        return "???";
    }

    private async Task RemovePatreonLink()
    {
        await PatreonService.UnlinkAsync();
        session.Patreon = null;
        await InvokeAsync(StateHasChanged);
    }

    private void LoginToPatreon()
    {
        patreonLinkInitiated = true;
        var url = PatreonService.GetPatreonLoginUrl();
        if (!string.IsNullOrEmpty(url))
        {
            NavigationManager.NavigateTo(url, true);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (reloadAfterRender)
        {
            NavigationManager.NavigateTo("/patreon");
            return;
        }
        if (session == null || session.UserId == null)
        {
            NavigationManager.NavigateTo("/login/redirect/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        }
    }

    private bool HasQueryParams()
    {
        string fragment = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Fragment;
        if (!string.IsNullOrEmpty(fragment))
            return fragment.Substring(0, 1).Contains("?") || fragment.Substring(0, 1).Contains("#");

        return false;
    }
}
