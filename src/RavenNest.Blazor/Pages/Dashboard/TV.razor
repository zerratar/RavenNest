@layout DashboardLayout
@page "/tv"
@using RavenNest.Blazor.Services.Models
@using Microsoft.AspNetCore.WebUtilities
@using RavenNest.BusinessLogic.Extensions
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.PatreonService PatreonService

<h1 class="page-title">Ravenfall TV - Your AI Generated TV Show</h1>

@if (!session.Authenticated)
{
    <p>You don't seem to be logged in.</p>
}
else
{
    <div class="-page-container">
        <div class="logo-container">
            <img class="ravenfall-tv-logo" src="/imgs/logo-tv.png" />
        </div>

        <div class="details">

            <div class="-badge-list">
                <div class="-badge patreon"><i class="fa-brands fa-patreon"></i>&nbsp;Patreon</div>
                <div class="-badge twitch"><i class="fa-brands fa-twitch"></i>&nbsp;Twitch Only</div>
                <div class="-badge experimental"><i class="fa-sharp fa-regular fa-flask"></i>&nbsp;Experimental</div>
            </div>

            <h2 class="details-section-header">What is this?</h2>
            <div class="details-section">
                <span>
                    Ravenfall TV is an AI generated "Tv" show based on the Ravenfall world, featuring the players of
                    Ravenfall!
                </span>
                <span>Viewers can participate and become part of the episodes they watch.</span>
                <span>
                    You can even customize the experience your viewers will have by adding your own description to
                    your show or leave it empty to go by the default. You can be creative and create the world you
                    want!
                </span>
            </div>


            <button class="btn download unavailable">
                <i class="fa-solid fa-download"></i>&nbsp;Download <b>v0.1.0a</b>&nbsp;<i class="fa-brands fa-windows"></i>
            </button>

            <div class="details-section notice">
                Currently, Ravenfall TV is only available for Windows and requires you to be a Ravenfall Patron to
                generate episodes. You may still download and use Ravenfall TV free of charge using episodes
                generated by other people.
            </div>
        </div>

        <!-- TODO: 

            make the actual episode scheduling on the server, so in the future you will be able to even create a playlist of episodes to playback. 
            Rerun, etc. Or even generate a set of episodes based on certain descriptions, continue on an old episode and much more

            1. Tab the Show Description part and Playlists
            2. Add a button to generate a new episode based on description
            3. Add a playlist management view
        -->

        <div class="settings unavailable">
            <EditForm 
              class="-form"
                      style="align-items: initial; justify-content: initial;"
              Model="@settingsModel"
              OnValidSubmit="@HandleUpdateAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="-input-row">
                    <label for="settings-name">
                        Name (Optional)&nbsp;<i class="fa-sharp fa-solid fa-circle-info"
                                                title="Giving your AI generated show a name won't have much effect on the episodes generated."></i>
                    </label>

                    <InputText name="settings-name" class="settings-name" placeholder="Adventures of Ravenfall" @bind-Value="settingsModel.Name" />                    
                </div>

                <div class="-input-row">
                    <label for="settings-description">
                        Description (Optional)&nbsp;<i class="fa-sharp fa-solid fa-circle-info"
                                                       title="Add a description for your generated show, try keep it aligned with Ravenfall as much as possible as it will influence the generated episodes"></i>
                    </label>

                    <InputTextArea rows="8" name="settings-description" class="settings-description" @bind-Value="settingsModel.Description" placeholder="What happens in the secret cave on Ironhill stays in the secret cave of Ironhill" />
                </div>

                <div class="-input-row">
                    <label for="settings-language">
                        Language (Optional)&nbsp;<i class="fa-sharp fa-solid fa-circle-info"
                                                    title="The language used in the show. This will not translate existing episodes, only generate new ones with the selected language."></i>
                    </label>
                    <select name="settings-language">
                        <option itemid="-1" value="None">English</option>
                        @for (var i = 0; i < PatreonService.AvailableLanguages.Length; ++i)
                        {
                            var language = PatreonService.AvailableLanguages[i];
                            <option itemid="@i" value="@language">@language</option>
                        }
                    </select>
                </div>

                <div class="btn-list">
                    <button type="submit" class="btn save">Save</button>
                </div>

            </EditForm>
            <p class="settings-error">@errorMessage</p>
        </div>
    </div>
}


@code {
    private RavenNest.Models.SessionInfo session;
    private ShowSettingsModel settingsModel = new ShowSettingsModel();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        session = AuthService.GetSession();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (session == null || !session.Authenticated)
        {
            NavigationManager.NavigateTo("/login/redirect/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        }
    }

    public async Task HandleUpdateAsync()
    {
        
    }

    public class ShowSettingsModel
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public bool SubscribersOnly { get; set; }
    }
}
