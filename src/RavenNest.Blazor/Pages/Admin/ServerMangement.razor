@layout AdminLayout
@page "/admin/server"
@using System.ComponentModel.DataAnnotations
@using RavenNest.BusinessLogic.Data
@using RavenNest.DataModels

@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.ServerService ServerService


@if (isAdmin)
{
    <h1>Send Server Announcement</h1>
    <div class="server-notification">
        <EditForm Model="@serverNotificationModel" OnValidSubmit="@SendServerNotification">
            <DataAnnotationsValidator />

            <div class="input-fields">
                <InputText class="input" placeholder="Server Message" @bind-Value="serverNotificationModel.Value" />
            </div>

            <ValidationSummary />
            <button class="btn btn-primary" Type="submit">Send</button>
        </EditForm>
    </div>

    <h1>Set Global Exp Multiplier</h1>
    <div class="experience-multiplier">
        <EditForm Model="@expMultiplierEventModel" OnValidSubmit="@SetExpMultiplierEvent">
            <DataAnnotationsValidator />

            <div class="input-fields">
                <InputText class="input" placeholder="Exp Multiplier" @bind-Value="expMultiplierEventModel.Multiplier" />
                <InputText class="input" placeholder="Message" @bind-Value="expMultiplierEventModel.Message" />
                <InputText class="input" placeholder="Start Time" @bind-Value="expMultiplierEventModel.StartTime" />
                <InputText class="input" placeholder="End Time" @bind-Value="expMultiplierEventModel.EndTime" />
            </div>

            <ValidationSummary />
            <button class="btn btn-primary" Type="submit"> Send</button>
        </EditForm>
    </div>

    <div class="server-details">
        <h2>TCP Api Network Details (last 10s)</h2>
        <ul class="details">
            <li><strong>Message Count:</strong>&nbsp;@ServerService.GameData.NetworkStats.MessageCount</li>
            <li><strong>Traffic in/out (KB/s):</strong>&nbsp;@ServerService.GameData.NetworkStats.ServerTransferRateKBps</li>
            <li><strong>Receive Pipes:</strong>&nbsp;@ServerService.GameData.NetworkStats.ReceivePipeCount</li>
            <li><strong>Date Sampled:</strong>&nbsp;@ServerService.GameData.NetworkStats.SampleDateTime</li>
        </ul>
    </div>

    <div class="bot-details">
        <h2>RavenBot Details<button class="btn btn-primary reload" @onclick="()=>ReloadStats()">Reload</button></h2>

        <div class="bot-detail-rows">
            <div class="bot-detail-row">
                <div class="bot-label">
                    Last Ping
                </div>

                <div class="bot-value">
                    @FormatTimeSpan(botStats.TimeSinceUpdate)
                </div>
            </div>

            @if (botStats.Values != null && botStats.Values.Count > 0)
            {
                @foreach (var key in botStats.Values.Keys)
                {
                    <div class="bot-detail-row">
                        <div class="bot-label">
                            @Sentence(key)
                        </div>

                        <div class="bot-value">
                            @FormatValue(botStats.Values[key])
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Joined Channels
                    </div>

                    <div class="bot-value">
                        @botStats.JoinedChannelsCount
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        User Count
                    </div>

                    <div class="bot-value">
                        @botStats.UserCount
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Connection Count
                    </div>

                    <div class="bot-value">
                        @botStats.ConnectionCount
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Session Count
                    </div>

                    <div class="bot-value">
                        @botStats.SessionCount
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Total Commands Received
                    </div>

                    <div class="bot-value">
                        @botStats.TotalCommandCount
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Commands Per Seconds
                    </div>
                    <div class="bot-value">
                        @botStats.CommandsPerSecondsDelta
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Peak Commands Per Seconds
                    </div>

                    <div class="bot-value">
                        @botStats.CommandsPerSecondsMax
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Last Session Started
                    </div>

                    <div class="bot-value">
                        @botStats.LastSessionStarted
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Last Session Ended
                    </div>

                    <div class="bot-value">
                        @botStats.LastSessionEnded
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Started
                    </div>

                    <div class="bot-value">
                        @botStats.Started
                    </div>
                </div>
                <div class="bot-detail-row">
                    <div class="bot-label">
                        Uptime
                    </div>

                    <div class="bot-value">
                        @FormatTimeSpan(botStats.Uptime)
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private TextModel serverNotificationModel = new TextModel();
    private BotStats botStats;
    private ExpMultiplierModel expMultiplierEventModel = new ExpMultiplierModel
        {
            StartTime = DateTime.UtcNow.ToString(),
            EndTime = DateTime.UtcNow.AddHours(1).ToString()
        };

    private RavenNest.Models.SessionInfo session;
    private bool isAdmin;
    private string FormatValue(object val)
    {
        var str = val?.ToString();

        if (!string.IsNullOrEmpty(str) && str.IndexOf(':') > 0)
        {
            if (str.IndexOf('-') > 0 && DateTime.TryParse(str, out var dt))
            {
                return FormatDateTime(dt);
            }
            if (TimeSpan.TryParse(str, out var ts))
            {
                return FormatTimeSpan(ts);
            }
        }

        return str;
    }

    private string FormatDateTime(DateTime dt)
    {
        if (dt == DateTime.MinValue)
        {
            return "-";
        }

        return dt.ToString();
    }

    private string Sentence(string input)
    {
        var str = input;
        var start = Char.ToUpper(str[0]);
        var process = str.Substring(1);
        process.Select((x, i) =>
        {
            if (Char.IsUpper(x)) return i;
            return -1;
        })
        .Reverse()
        .ForEach(x =>
        {
            if (x != -1)
                process = process.Insert(x, " ");
        });

        return start + process;
    }
    protected override void OnInitialized()
    {
        session = AuthService.GetSession();
        isAdmin = session != null && session.Administrator;
        botStats = ServerService.GetBotStats();
    }

    private void ReloadStats()
    {
        botStats = ServerService.GetBotStats();
        InvokeAsync(StateHasChanged);
    }

    private void SendServerNotification()
    {
        if (!isAdmin)
        {
            return;
        }

        var msg = serverNotificationModel.Value;
        var minDuration = 5000;
        var wordCount = msg.Split(' ').Length;
        ServerService.SendServerAnnouncement(msg, Math.Max(minDuration, wordCount * 1000));
        serverNotificationModel.Value = null;
    }
    private string FormatTimeSpan(TimeSpan elapsed)
    {
        var str = "";
        if (elapsed.Days > 0)
        {
            str += elapsed.Days + "d ";
        }
        if (elapsed.Hours > 0)
        {
            str += elapsed.Hours + "h ";
        }
        if (elapsed.Minutes > 0)
        {
            str += elapsed.Minutes + "m ";
        }

        str += elapsed.Seconds + "s";
        return str;
    }


    private void SetExpMultiplierEvent()
    {
        if (!isAdmin)
        {
            return;
        }

        if (!DateTime.TryParse(expMultiplierEventModel.EndTime, out var endTime))
        {
            return;
        }
        if (!int.TryParse(expMultiplierEventModel.Multiplier, out var multiplier))
        {
            return;
        }

        var startTime = DateTime.UtcNow;
        DateTime.TryParse(expMultiplierEventModel.StartTime, out startTime);

        ServerService.SendExpMultiplierEvent(multiplier, expMultiplierEventModel.Message, startTime, endTime);
        expMultiplierEventModel.Multiplier = null;
        expMultiplierEventModel.Message = null;
    }

    public class ExpMultiplierModel
    {
        [Required]
        public string Multiplier { get; set; }
        [Required]
        public string Message { get; set; }
        public string StartTime { get; set; }
        [Required]
        public string EndTime { get; set; }
    }

    public class TextModel
    {
        [Required]
        public string Value { get; set; }
    }
}
