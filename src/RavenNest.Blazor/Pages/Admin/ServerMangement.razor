@layout AdminLayout
@page "/admin/server"
@using System.ComponentModel.DataAnnotations
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.ServerService ServerService


@if (isAdmin)
{
  <h1>Send Server Announcement</h1>
  <div class="server-notification">
    <EditForm Model="@serverNotificationModel" OnValidSubmit="@SendServerNotification">
      <DataAnnotationsValidator />

      <div class="input-fields">
        <InputText class="input" placeholder="Server Message" @bind-Value="serverNotificationModel.Value" />
      </div>

      <ValidationSummary />
      <button class="btn btn-primary" Type="submit">Send</button>
    </EditForm>
  </div>

  <h1>Set Global Exp Multiplier</h1>
  <div class="experience-multiplier">
    <EditForm Model="@expMultiplierEventModel" OnValidSubmit="@SetExpMultiplierEvent">
      <DataAnnotationsValidator />

      <div class="input-fields">
        <InputText class="input" placeholder="Exp Multiplier" @bind-Value="expMultiplierEventModel.Multiplier" />
        <InputText class="input" placeholder="Message" @bind-Value="expMultiplierEventModel.Message" />
        <InputText class="input" placeholder="Start Time" @bind-Value="expMultiplierEventModel.StartTime" />
        <InputText class="input" placeholder="End Time" @bind-Value="expMultiplierEventModel.EndTime" />
      </div>

      <ValidationSummary />
      <button class="btn btn-primary" Type="submit"> Send</button>
    </EditForm>
  </div>
}

@code {
    private TextModel serverNotificationModel = new TextModel();

    private ExpMultiplierModel expMultiplierEventModel = new ExpMultiplierModel
    {
      StartTime = DateTime.UtcNow.ToString(),
      EndTime = DateTime.UtcNow.AddHours(1).ToString()
    };

    private RavenNest.Sessions.SessionInfo session;
    private bool isAdmin;

    protected override void OnInitialized()
    {
      session = AuthService.GetSession();
      isAdmin = session != null && session.Administrator;
    }

    private void SendServerNotification()
    {
      if (!isAdmin)
      {
        return;
      }

      var msg = serverNotificationModel.Value;
      var minDuration = 5000;
      var wordCount = msg.Split(' ').Length;
      ServerService.SendServerAnnouncement(msg, Math.Max(minDuration, wordCount * 1000));
      serverNotificationModel.Value = null;
    }

    private void SetExpMultiplierEvent()
    {
      if (!isAdmin)
      {
        return;
      }

      if (!DateTime.TryParse(expMultiplierEventModel.EndTime, out var endTime))
      {
        return;
      }
      if (!int.TryParse(expMultiplierEventModel.Multiplier, out var multiplier))
      {
        return;
      }

      var startTime = DateTime.UtcNow;
      DateTime.TryParse(expMultiplierEventModel.StartTime, out startTime);

      ServerService.SendExpMultiplierEvent(multiplier, expMultiplierEventModel.Message, startTime, endTime);
      expMultiplierEventModel.Multiplier = null;
      expMultiplierEventModel.Message = null;
    }

    public class ExpMultiplierModel
    {
      [Required]
      public string Multiplier { get; set; }
      [Required]
      public string Message { get; set; }
      public string StartTime { get; set; }
      [Required]
      public string EndTime { get; set; }
    }

    public class TextModel
    {
      [Required]
      public string Value { get; set; }
    }
}
