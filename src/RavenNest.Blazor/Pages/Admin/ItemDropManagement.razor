@using Blazored.Typeahead
@using RavenNest.DataModels

@layout AdminLayout
@page "/admin/drops"
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.ItemService ItemService

@if (isAdmin)
{

    @if (confirmDeleteVisible)
    {
        <div class="confirm-modal-background">
            <div class="confirm-modal">
                <div class="confirm-modal-body">
                    Are you sure you want to delete this resource drop?
                </div>
                <div class="modal-actions">
                    <button class="btn ok" @onclick="() => ConfirmDelete()">OK</button>
                    <button class="btn cancel" @onclick="() => CancelDelete()">Cancel</button>
                </div>
            </div>
        </div>
    }

    @if (editorVisible)
    {
        <div class="item-editor-background">

            <div class="item-editor-modal">
                <div class="item-editor-header">
                    <h2>Add / Modify Resource Drop</h2>
                    <button class="close" @onclick="HideModal">x</button>
                </div>

                <EditForm Model="@dataModel" OnValidSubmit="@HandleUpdateItem">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-row">
                        <label>Drop Chance</label>
                        <InputText class="modal-input" @bind-Value="dataModel.DropChance" />
                    </div>

                    <div class="form-row">
                        <label>Cooldown</label>
                        <InputText class="modal-input" @bind-Value="dataModel.Cooldown" />
                    </div>

                    <div class="form-row">
                        <label>Required Skill Level</label>
                        <InputNumber class="modal-input" @bind-Value="dataModel.SkillLevel" />
                    </div>
                    <div class="form-row">
                        <label>Skill (Optional)</label>
                        <InputText class="modal-input" @bind-Value="dataModel.Skill" />
                    </div>

                    <div class="form-group">
                        <div class="form-group-header">
                            Item to be dropped
                        </div>
                        <div class="form-row">
                            <label>Item Id</label>
                            <InputText class="modal-input" @bind-Value="dataModel.ItemId" />
                        </div>
                        <div class="form-row">
                            <label>Item Name</label>
                            <InputText class="modal-input" @bind-Value="dataModel.ItemName" />
                        </div>

                        <div class="form-row">
                            <label>Search by name</label>
                            <BlazoredTypeahead SearchMethod="SearchItem" @onselect="() => SelectedItemChanged()" @bind-Value="dataModel.TargetItem" Context="searchContext">
                                <SelectedTemplate>
                                    @searchContext.Name
                                </SelectedTemplate>
                                <ResultTemplate>
                                    @searchContext.Name
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>
                    <div class="modal-actions">
                        <button class="btn ok" type="submit">OK</button>
                        <button class="btn cancel" @onclick="() => HideModal()">Cancel</button>
                    </div>
                </EditForm>


            </div>

        </div>
    }

    @*    <div class="item-create">
        <p>Paste json of item to update or add.</p>
        <EditForm Model="@createItem" OnValidSubmit="@HandleUpdateItem">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputTextArea rows="5" id="name" @bind-Value="createItem.Json" />
        <button type="submit">Submit</button>
        </EditForm>
        <p class="item-name-error">@updateError</p>
        </div>*@


    @if (resourceItemDrops == null)
    {
        <span>Loading items... Please wait</span>
        <LoadIndicator></LoadIndicator>
    }
    else
    {

        <button class="link-button" @onclick="() => ShowModal(null)">Create New&nbsp;<i class="fa-solid fa-circle-plus"></i></button>
        <table class="items-list">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Skill</th>
                    <th>Level Req</th>
                    <th>Drop Chance</th>
                    <th>Cooldown</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in resourceItemDrops)
                {
                    <tr id="@item.Id" class="item-row">
                        <td><img src="/imgs/items/@(item.ItemId).png" style="width: 40px" /></td>
                        <td class='item'>@item.ItemName</td>
                        <td class='item'>@(item.Skill != null ? RavenNest.DataModels.Skills.SkillNames[item.Skill.Value] : "")</td>
                        <td class='item'>@item.LevelRequirement</td>
                        <td class='item'>@item.DropChance</td>
                        <td class='item'>@item.Cooldown</td>
                        <td class='item'>
                            <button class="link-button" @onclick="() => ShowConfirmDelete(item)"><i class="fa-solid fa-trash-can"></i></button>
                            <button class="link-button" @onclick="() => ShowModal(item)"><i class="fas fa-pencil-alt"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    private bool isAdmin;
    private bool confirmDeleteVisible;
    private bool editorVisible;
    private ModifyDrop dataModel;
    private RavenNest.Models.SessionInfo session;
    private IReadOnlyList<RavenNest.DataModels.ResourceItemDrop> resourceItemDrops;
    RavenNest.DataModels.ResourceItemDrop toDelete;
    //private RavenNest.Models.ItemCollection items;

    private async void HandleUpdateItem()
    {
        if (dataModel == null)
        {
            if (editorVisible)
            {
                HideModal();
            }

            return;
        }

        if (dataModel.Drop == null)
        {
            // create a new one
            var model = await dataModel.CreateAsync();
            if (model != null)
            {
                await ItemService.AddResourceDropAsync(model);
                resourceItemDrops = await ItemService.GetResourceItemDrops();
                HideModal();
                return;
            }

            return;
        }

        await dataModel.SaveChanges();
        HideModal();
    }

    private void SelectedItemChanged()
    {
        var item = dataModel.TargetItem;
        if (item != null)
        {
            dataModel.ItemId = item.Id.ToString();
            dataModel.ItemName = item.Name;
        }

        InvokeAsync(StateHasChanged);
    }

    private void HideModal()
    {
        dataModel = null;
        editorVisible = false;
        InvokeAsync(StateHasChanged);
    }

    private void ShowConfirmDelete(RavenNest.DataModels.ResourceItemDrop drop)
    {
        toDelete = drop;
        confirmDeleteVisible = true;
        InvokeAsync(StateHasChanged);
    }

    private async void ConfirmDelete()
    {
        if (toDelete != null && ItemService.RemoveResourceDrop(toDelete))
        {
            resourceItemDrops = await ItemService.GetResourceItemDrops();
        }

        confirmDeleteVisible = false;
        toDelete = null;
        await InvokeAsync(StateHasChanged);
    }

    private void CancelDelete()
    {
        confirmDeleteVisible = false;
        toDelete = null;
        InvokeAsync(StateHasChanged);
    }

    private void ShowModal(RavenNest.DataModels.ResourceItemDrop drop)
    {
        dataModel = new ModifyDrop(ItemService, drop);
        editorVisible = true;
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        session = AuthService.GetSession();
        isAdmin = session != null && session.Administrator;
        LoadItems();
    }

    private async void LoadItems()
    {
        resourceItemDrops = await ItemService.GetResourceItemDrops();
        //items = new Models.ItemCollection(await ItemService.GetItemsAsync().OrderBy(x => x.Name));
        StateHasChanged();
    }

    private async Task<IEnumerable<RavenNest.Models.Item>> SearchItem(string searchText)
    {
        return await ItemService.SearchAsync(searchText);
    }

    public class ModifyDrop
    {
        private readonly RavenNest.Blazor.Services.ItemService itemService;
        public readonly RavenNest.DataModels.ResourceItemDrop Drop;

        public ModifyDrop(
          RavenNest.Blazor.Services.ItemService itemService,
          RavenNest.DataModels.ResourceItemDrop d)
        {
            this.itemService = itemService;
            this.Drop = d;

            if (d != null)
            {
                DropChance = d.DropChance.ToString();
                Cooldown = d.Cooldown.GetValueOrDefault().ToString();
                ItemName = d.ItemName;
                ItemId = d.ItemId.ToString();

                if (d.Skill != null)
                {
                    Skill = RavenNest.DataModels.Skills.SkillNames[d.Skill.Value];
                }

                SkillLevel = d.LevelRequirement;
                TargetItem = itemService.GetItem(d.ItemId);
                return;
            }

            Cooldown = 0.ToString();
            DropChance = 0.01.ToString();
            SkillLevel = 1;
        }

        public async Task<bool> SaveChanges()
        {
            if (Drop == null) return false;
            var toCopy = await CreateAsync();
            Drop.ItemId = toCopy.ItemId;
            Drop.ItemName = toCopy.ItemName;
            Drop.DropChance = toCopy.DropChance;
            Drop.Cooldown = toCopy.Cooldown;
            Drop.LevelRequirement = toCopy.LevelRequirement;
            Drop.Skill = toCopy.Skill;
            return true;
        }

        public async Task<RavenNest.DataModels.ResourceItemDrop> CreateAsync()
        {
            int? index = null;

            if (!string.IsNullOrEmpty(Skill))
            {
                if (int.TryParse(Skill, out var si))
                {
                    index = si;
                }
                else
                {
                    // try get index by name.
                    var i = RavenNest.DataModels.Skills.IndexOf(Skill);
                    if (i != -1)
                        index = i;
                }
            }

            if (string.IsNullOrEmpty(ItemId) && string.IsNullOrEmpty(ItemName) && TargetItem == null)
            {
                // we can't determine which item it is.
                return null;
            }

            if (TargetItem == null && !string.IsNullOrEmpty(ItemId) && Guid.TryParse(ItemName, out var id))
            {
                TargetItem = itemService.GetItem(id);
            }

            if (TargetItem == null && !string.IsNullOrEmpty(ItemName))
            {
                TargetItem = (await itemService.SearchAsync(ItemName)).FirstOrDefault();
            }

            var dropChance = 0.01;

            if (!string.IsNullOrEmpty(DropChance))
            {
                double.TryParse(DropChance, out dropChance);
            }

            var cooldown = 0.0;
            if (!string.IsNullOrEmpty(Cooldown))
            {
                double.TryParse(Cooldown, out cooldown);
            }

            if (TargetItem != null)
            {
                return new RavenNest.DataModels.ResourceItemDrop
                    {
                        Id = Guid.NewGuid(),
                        ItemId = TargetItem.Id,
                        ItemName = TargetItem.Name,
                        DropChance = dropChance,
                        LevelRequirement = SkillLevel,
                        Skill = index,
                        Cooldown = cooldown
                    };
            }

            return null;
        }

        public RavenNest.Models.Item TargetItem { get; set; }

        public string ItemName { get; set; }
        public string ItemId { get; set; }
        public string Skill { get; set; }
        public string DropChance { get; set; }
        public string Cooldown { get; set; }
        public int SkillLevel { get; set; }
    }
}