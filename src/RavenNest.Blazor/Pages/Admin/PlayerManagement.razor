@layout AdminLayout
@page "/admin/players"
@using RavenNest
@using RavenNest.BusinessLogic.Extended
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject NavigationManager NavigationManager

<div class="pagenation">
    <div class="page-navigation">
        <button class="link-button" @onclick="PreviousPage"><i class="fas fa-chevron-left"></i></button>
        <div class="pages">
            <div class="current-page">@(pageIndex + 1)</div>&nbsp;/&nbsp;
            <div class="total-pages">@pageCount</div>
        </div>
        <button class="link-button" @onclick="NextPage"><i class="fas fa-chevron-right"></i></button>
    </div>
    <div class="search-bar">
        <EditForm Model="searchModel" OnSubmit="Filter">
            <InputText class="search-input" placeholder="Search for id, username or name" @bind-Value="searchModel.Query" />
        </EditForm>
    </div>
    <div class="total-players"><span>@totalCount</span> players</div>
</div>


<table class="player-table">
    <thead>
        <tr>
            @*<th>Id</th>*@
            <th>UserName</th>
            <th>Name</th>
            <th>Session</th>
            <th>Admin</th>
            <th>Mod</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (players == null || loading)
        {
            <LoadIndicator></LoadIndicator>
        }
        else
        {
            @foreach (var player in players)
            {
                <tr class="player-row">
                    @*<td>@player.Id</td>*@
                    <td><a href="/inspect/@player.Id" target="_blank">@player.UserName<span class='player-character-index' alt='Character Number'>#@player.CharacterIndex</span></a></td>
                    <td>

                        @*<span v-if="editingName(player.userId)">
                <input class="table-edit" v-model="player.name" />
                <button class="link-button" @click="applyEditName(player.id)"><i class="fas fa-check"></i></button>
                <button class="link-button" @click="cancelEditName(player.id)"><i class="fas fa-times"></i></button>
                </span>*@

                        <span>
                            @*v-if="!editingName(player.userId)"*@
                            @player.Name
                            @*<button class="link-button" @click="editName(player.id)"><i class="fas fa-pencil-alt"></i></button>*@
                        </span>

                    </td>
                    <td><a href="https://www.twitch.tv/@player.SessionName" target="_blank">@player.SessionName</a></td>
                    <td>@(player.IsAdmin ? "Yes" : "No")</td>
                    <td>@(player.IsModerator ? "Yes" : "No")</td>
                    <td>
                        @if (!player.UserName.Equals(player.Name, StringComparison.OrdinalIgnoreCase))
                        {
                            <button title="Rename player to match Username" class="inline-button secondary" @onclick="(()=>MakeNameMatchUsername(player))"><i class="fa-sharp fa-regular fa-signature"></i></button>
                        }

                        @if (!string.IsNullOrEmpty(player.SessionName))
                        {
                            <button title="Kick from game session" class="inline-button error" @onclick="(()=>KickPlayer(player))"><i class="fa-solid fa-user-xmark"></i></button>
                        }

                        @if (string.IsNullOrEmpty(player.SessionName) || !player.SessionName.Equals(session.UserName, StringComparison.OrdinalIgnoreCase))
                        {
                            <button title="Add to game session" class="inline-button success" @onclick="(()=>AddToMyGame(player))"><i class="fa-solid fa-user-plus"></i></button>
                        }

                    </td>
                </tr>
            }
        }
    </tbody>
</table>



@code {
    private bool loading = false;
    private PlayerSearchModel searchModel = new PlayerSearchModel();
    private RavenNest.Models.SessionInfo session;
    private IReadOnlyList<WebsiteAdminPlayer> players;
    private int pageIndex = 0;
    private int pageSize = 50;
    private int pageCount = 1;
    private long totalCount = 0;

    protected override void OnInitialized()
    {
        session = AuthService.GetSession();
        LoadPlayerPageAsync(pageIndex, pageSize);
    }

    private async void KickPlayer(WebsiteAdminPlayer player)
    {
        PlayerService.Kick(player);

        await InvokeAsync(StateHasChanged);
    }

    private async void AddToMyGame(WebsiteAdminPlayer player)
    {
        PlayerService.AddToMySession(player);

        await InvokeAsync(StateHasChanged);
    }

    private async void MakeNameMatchUsername(WebsiteAdminPlayer player)
    {
        PlayerService.MakeNameMatchUsername(player);
        await InvokeAsync(StateHasChanged);
    }

    // private void DisplayPlayer(WebsiteAdminPlayer player)
    // {
    //     NavigationManager.NavigateTo("/inspect/" + player.Id);
    // }

    private void Filter()
    {
        pageIndex = 0;
        LoadPlayerPageAsync(pageIndex, pageSize);
    }

    private void NextPage()
    {
        ++pageIndex;
        LoadPlayerPageAsync(pageIndex, pageSize);
    }

    private void PreviousPage()
    {
        var oldPage = pageIndex;
        if (--pageIndex < 0)
            pageIndex = 0;
        if (oldPage != pageIndex)
            LoadPlayerPageAsync(pageIndex, pageSize);
    }

    private async Task LoadPlayerPageAsync(int index, int take)
    {
        loading = true;
        var filter = searchModel.Query;
        var result = await PlayerService.GetPlayerPageAsync(filter, index, take);
        players = result.Items;
        totalCount = result.TotalSize;
        pageCount = (int)Math.Floor((double)this.totalCount / this.pageSize) + 1;
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    public class PlayerSearchModel
    {
        public string Query { get; set; }
    }
}
