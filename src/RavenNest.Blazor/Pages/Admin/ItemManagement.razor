@layout AdminLayout
@page "/admin/items"
@using Microsoft.AspNetCore.Hosting;
@using RavenNest.BusinessLogic.Game;
@using RavenNest.Models;
@using System.IO;
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.ItemService ItemService
@inject IJSRuntime JsRuntime
@inject IWebHostEnvironment Environment

@if (isAdmin)
{

    @if (ItemEditorVisible)
    {
        <div class="item-editor-background">
            <div class="item-editor-modal">
                @*Model="editedItem"*@
                <div class="btn btn-close" @onclick="(() => ItemEditorVisible = false)">&times;</div>
                <div class="tabs">
                    <div class="tab-buttons">
                        <div class="btn-tab @(activeTab == ItemEditTab.Form ? "active" : "")" @onclick="ShowForm">Form</div>
                        <div class="btn-tab @(activeTab == ItemEditTab.Json ? "active" : "")" @onclick="ShowJson">Json</div>
                    </div>

                    @if (activeTab == ItemEditTab.Json)
                    {
                        <div class="tab-content">
                            <textarea @bind="jsonPresentation" class="item-editor-json"></textarea>
                        </div>
                    }

                    @if (activeTab == ItemEditTab.Form)
                    {
                        <div class="tab-content">
                            <EditForm class="item-editor-form" EditContext="context" OnValidSubmit="HandleSaveItem">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="edit-content">
                                    <div class="edit-section general">
                                        <h2>General</h2>

                                        <div class="input-row">
                                            @if (ItemImageExists())
                                            {
                                                <img src="@(ItemService.GetItemImage(editedItem.IdString, editedItem.Name))" class="item-image" />
                                            }
                                            else
                                            {
                                                <img src="https://placehold.co/100x100" class="item-image" />
                                            }

                                            <label class="input-label">Upload Image</label>
                                            <InputFile OnChange="@UploadImage" />
                                        </div>

                                        <div class="input-row">
                                            <label class="input-label">ID</label>
                                            <InputText id="name" @bind-Value="editedItem.IdString" />
                                        </div>

                                        <div class="input-row">
                                            <label class="input-label">Name</label>
                                            <InputText id="name" @bind-Value="editedItem.Name" />
                                        </div>
                                        <div class="input-row">
                                            <label class="input-label">Description</label>
                                            <InputText id="description" @bind-Value="editedItem.Description" />
                                        </div>


                                        <div class="input-row">
                                            <label class="input-label">Level</label>
                                            <InputNumber id="level" @bind-Value="editedItem.Level" />
                                        </div>


                                        <div class="input-row inline">
                                            <label class="input-label">Soulbound</label>
                                            <InputCheckbox id="soulbound" @bind-Value="editedItem.Soulbound" />
                                        </div>


                                        <div class="input-row">
                                            <label class="input-label">Category</label>
                                            <InputSelect id="itemCategory" @bind-Value="editedItem.Category">
                                                @foreach (var option in Enum.GetValues<ItemCategory>())
                                                {
                                                    <option value="@option">@option</option>
                                                }
                                            </InputSelect>
                                        </div>


                                        <div class="input-row">
                                            <label class="input-label">Type (Sub Category)</label>
                                            <InputSelect id="itemType" @bind-Value="editedItem.Type">
                                                @foreach (var option in Enum.GetValues<ItemType>())
                                                {
                                                    <option value="@option">@option</option>
                                                }
                                            </InputSelect>
                                        </div>


                                        <div class="input-row">
                                            <label class="input-label">Material (Used for ingame skinning, non-generic items only)</label>
                                            <InputSelect id="itemMaterial" @bind-Value="editedItem.Material">
                                                @foreach (var option in Enum.GetValues<ItemMaterial>())
                                                {
                                                    <option value="@option">@option</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>

                                    @if (CanBeEquipped())
                                    {

                                        <div class="edit-section level-requirements">
                                            <h2>Level Requirements</h2>
                                            <div class="input-row">
                                                <label class="input-label">Required Attack Level</label>
                                                <InputNumber id="reqAttackLevel" @bind-Value="editedItem.RequiredAttackLevel" />
                                            </div>
                                            <div class="input-row">
                                                <label class="input-label">Required Defense Level</label>
                                                <InputNumber id="reqDefenseLevel" @bind-Value="editedItem.RequiredDefenseLevel" />
                                            </div>
                                            <div class="input-row">
                                                <label class="input-label">Required Magic Level</label>
                                                <InputNumber id="reqMagicLevel" @bind-Value="editedItem.RequiredMagicLevel" />
                                            </div>
                                            <div class="input-row">
                                                <label class="input-label">Required Ranged Level</label>
                                                <InputNumber id="reqRangedLevel" @bind-Value="editedItem.RequiredRangedLevel" />
                                            </div>
                                            <div class="input-row">
                                                <label class="input-label">Required Slayer Level</label>
                                                <InputNumber id="reqSlayerLevel" @bind-Value="editedItem.RequiredSlayerLevel" />
                                            </div>
                                        </div>

                                        <div class="edit-section appearance">
                                            <h2>Appearance</h2>
                                            <div class="input-row inline">
                                                <label class="input-label">Use Generic Model (Same model for all characters)</label>
                                                <InputCheckbox id="genericModel" @bind-Value="editedItem.IsGenericModel" />
                                            </div>


                                            @if (editedItem.IsGenericModel)
                                            {
                                                <div class="input-row">
                                                    <label class="input-label">Generic Prefab Path</label>
                                                    <InputText id="genericPrefab" @bind-Value="editedItem.GenericPrefab" />
                                                </div>

                                            }
                                            else
                                            {
                                                <div class="input-row">
                                                    <label class="input-label">Male Prefab Path</label>
                                                    <InputText id="malePrefab" @bind-Value="editedItem.MalePrefab" />
                                                </div>


                                                <div class="input-row">
                                                    <label class="input-label">Male Model Attributes</label>
                                                    <InputText id="maleModelId" @bind-Value="editedItem.MaleModelId" />
                                                </div>


                                                <div class="input-row">
                                                    <label class="input-label">Female Prefab Path</label>
                                                    <InputText id="femalePrefab" @bind-Value="editedItem.FemalePrefab" />
                                                </div>

                                                <div class="input-row">
                                                    <label class="input-label">Female Model Attributes</label>
                                                    <InputText id="femaleModelId" @bind-Value="editedItem.FemaleModelId" />
                                                </div>
                                            }
                                        </div>

                                        <div class="edit-section stats">
                                            <h2>Item Stats</h2>
                                            @if (CanHaveDefensiveStats())
                                            {
                                                <div class="input-row">
                                                    <label class="input-label">Armor Power</label>
                                                    <InputNumber id="armorPower" @bind-Value="editedItem.ArmorPower" />
                                                </div>

                                            }
                                            @if (CanHaveOffensiveStats())
                                            {
                                                <div class="input-row">
                                                    <label class="input-label">Weapon Power</label>
                                                    <InputNumber id="weaponPower" @bind-Value="editedItem.WeaponPower" />
                                                </div>

                                                <div class="input-row">
                                                    <label class="input-label">Weapon Aim</label>
                                                    <InputNumber id="weaponAim" @bind-Value="editedItem.WeaponAim" />
                                                </div>

                                                <div class="input-row">
                                                    <label class="input-label">Magic Power</label>
                                                    <InputNumber id="magicPower" @bind-Value="editedItem.MagicPower" />
                                                </div>

                                                <div class="input-row">
                                                    <label class="input-label">Magic Aim</label>
                                                    <InputNumber id="magicAim" @bind-Value="editedItem.MagicAim" />
                                                </div>

                                                <div class="input-row">
                                                    <label class="input-label">Ranged Power</label>
                                                    <InputNumber id="rangedPower" @bind-Value="editedItem.RangedPower" />
                                                </div>

                                                <div class="input-row">
                                                    <label class="input-label">Ranged Aim</label>
                                                    <InputNumber id="rangedAim" @bind-Value="editedItem.RangedAim" />
                                                </div>
                                            }
                                        </div>
                                    }

                                    <div class="edit-section vendor">
                                        <h2>Vendor</h2>
                                        <div class="input-row">
                                            <label class="input-label">Shop Sell Price (How much do we get when !vendor?)</label>
                                            <InputNumber id="shopSellPrice" @bind-Value="editedItem.ShopSellPrice" />
                                        </div>

                                        <div class="input-row">
                                            <label class="input-label">Shop Buy Price (How much does it cost to buy?)</label>
                                            <InputNumber id="shopBuyPrice" @bind-Value="editedItem.ShopBuyPrice" />
                                        </div>
                                    </div>
                                    @*
                        <div class="edit-section crafting">
                        <h2>Crafting Requirements</h2>
                        <div class="input-row inline">
                        <label class="input-label">Is Craftable?</label>
                        <InputCheckbox id="craftable" @bind-Value="editedItem.Craftable" />
                        </div>
                        @if (editedItem.Craftable)
                        {
                        <div class="input-row">
                        <label class="input-label">Required Crafting Level</label>
                        <InputNumber id="craftingLevel" @bind-Value="editedItem.RequiredCraftingLevel" />
                        </div>
                        <div class="input-row">
                        <label class="input-label">Required Cooking Level</label>
                        <InputNumber id="craftingLevel" @bind-Value="editedItem.RequiredCookingLevel" />
                        </div>
                        <div class="crafting-resource-requirements">
                        <div class="input-row">
                        <label class="input-label">Ore Cost (WILL BE REMOVED!!)</label>
                        <InputNumber id="oreCost" @bind-Value="editedItem.OreCost" />
                        </div>
                        <div class="input-row">
                        <label class="input-label">Wood Cost (WILL BE REMOVED!!)</label>
                        <InputNumber id="woodCost" @bind-Value="editedItem.WoodCost" />
                        </div>
                        </div>
                        <div class="crafting-item-requirements">
                        @if (editedItem.CraftingRequirements != null)
                        {
                        foreach (var req in editedItem.CraftingRequirements)
                        {
                        <div class="crafting-requirement">

                        <div class="input-row">
                        <label class="input-label">Resource Item</label>
                        <InputSelect @bind-Value="req.ResourceItemId">
                        @foreach (var item in items.Where(x => x.Category == ItemCategory.Resource))
                        {
                        <option value="@item.Id">@item.Name</option>
                        }
                        </InputSelect>
                        </div>

                        <div class="input-row">
                        <label class="input-label">Amount</label>
                        <InputNumber @bind-Value="req.Amount" />
                        </div>

                        <div class="btn delete-crafting-requirement" @onclick="(() => RemoveCraftingRequirement(req))">
                        <i class="fas fa-trash"></i>
                        </div>
                        </div>
                        }
                        }
                        </div>
                        <div class="btn add-crafting-requirement" @onclick="AddCraftingRequirement">Add Crafting Requirement</div>
                        }
                        </div>*@
                                </div>
                                <div class="modal-buttons">
                                    <button type="submit" class="btn">Save</button>
                                </div>
                            </EditForm>
                        </div>
                    }

                </div>
            </div>
        </div>
    }

    @if (items == null)
    {
        <span>Loading items... Please wait</span>
        <LoadIndicator></LoadIndicator>
    }
    else
    {
        <button class="btn" @onclick="CreateNewItem">Create New Item</button>

        <div class="stash item-filters">
            <button class="item-filter @(itemFilter == ItemFilter.All ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.All)">
                <span class="item-filter-text">All</span>
                <i class="fa-sharp fa-solid fa-rectangles-mixed"></i>
            </button>
            <button class="item-filter @(itemFilter == ItemFilter.Swords ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Swords)">
                <span class="item-filter-text">Swords</span>
                <i class="fa-sharp fa-solid fa-sword"></i>
            </button>
            <button class="item-filter @(itemFilter == ItemFilter.Axes ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Axes)">
                <span class="item-filter-text">Axes</span>
                <i class="fa-sharp fa-solid fa-axe"></i>
            </button>
            <button class="item-filter @(itemFilter == ItemFilter.Spears ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Spears)">
                <span class="item-filter-text">Spears</span>
                <i class="fa-solid fa-scythe"></i>
            </button>
            <button class="item-filter @(itemFilter == ItemFilter.Bows ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Bows)">
                <span class="item-filter-text">Bows</span>
                <i class="fa-sharp fa-solid fa-bow-arrow"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Staves ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Staves)">
                <span class="item-filter-text">Staves</span>
                <i class="fa-sharp fa-solid fa-staff"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Shields ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Shields)">
                <span class="item-filter-text">Shields</span>
                <i class="fa-sharp fa-solid fa-shield"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Armors ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Armors)">
                <span class="item-filter-text">Armors</span>
                <i class="fa-sharp fa-solid fa-helmet-battle"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Accessories ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Accessories)">
                <span class="item-filter-text">Accessories</span>
                <i class="fa-sharp fa-solid fa-gem"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Pets ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Pets)">
                <span class="item-filter-text">Pets</span>
                <i class="fa-sharp fa-solid fa-dog"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Scrolls ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Scrolls)">
                <span class="item-filter-text">Scrolls</span>
                <i class="fa-sharp fa-solid fa-scroll"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Woodcutting ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Woodcutting)">
                <span class="item-filter-text">Woodcutting</span>
                <i class="fa-solid fa-tree"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Mining ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Mining)">
                <span class="item-filter-text">Mining</span>
                <i class="fa-solid fa-pickaxe"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Fishing ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Fishing)">
                <span class="item-filter-text">Fishing</span>
                <i class="fa-sharp fa-solid fa-fishing-rod"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Farming ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Farming)">
                <span class="item-filter-text">Farming</span>
                <i class="fa-solid fa-wheat"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Gathering ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Gathering)">
                <span class="item-filter-text">Gathering</span>
                <i class="fa-solid fa-mushroom"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Crafting ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Crafting)">
                <span class="item-filter-text">Crafting</span>
                <i class="fa-sharp fa-solid fa-hammer"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Cooking ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Cooking)">
                <span class="item-filter-text">Cooking</span>
                <i class="fa-sharp fa-solid fa-user-chef"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Alchemy ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Alchemy)">
                <span class="item-filter-text">Alchemy</span>
                <i class="fa-sharp fa-solid fa-flask-round-potion"></i>
            </button>
        </div>

        <table class="items-list">
            <thead>
                <tr>
                    <th></th>
                    <th class="name">Name</th>
                    <th class="stats">Stats</th>
                    <th class="level-requirement">Level Req</th>
                    <th class="category">Category</th>
                    <th class="type">Item Type</th>
                    <th class="material">Material Type</th>
                    <th class="shop-sell-price">Vendor Price</th>
                    <th class="crafting-requirement">Use &amp; Source</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in items)
                {
                    <tr id="@item.Id" class="item-row">
                        <td><img src="@(ItemService.GetItemImage(item.Id.ToString(), item.Name))" style="width: 40px" /></td>
                        <td class='item name'>@item.Name</td>
                        <td class='item stats'>
                            @if (item.WeaponAim > 0)
                            {
                                <span class="item-stat" title="Weapon Aim - Increases your hit rate in melee"><i class="fas fa-crosshairs"></i>@item.WeaponAim</span>
                            }
                            @if (item.WeaponPower > 0)
                            {
                                <span class="item-stat" title="Weapon Power - Increases your maximum damage in melee"><i class="fas fa-swords"></i>@item.WeaponPower</span>
                            }
                            @if (item.RangedAim > 0)
                            {
                                <span class="item-stat" title="Ranged Aim - Increases your ranged hit rate"><i class="fas fa-crosshairs"></i>@item.RangedAim</span>
                            }
                            @if (item.RangedPower > 0)
                            {
                                <span class="item-stat" title="Ranged Power - Increases your ranged maximum damage"><i class="fas fa-bow-arrow"></i>@item.RangedPower</span>
                            }
                            @if (item.MagicAim > 0)
                            {
                                <span class="item-stat" title="Magic Aim - Increases your magic hit rate">
                                    <i class="fas fa-wand"></i>@item.MagicAim
                                </span>
                            }
                            @if (item.MagicPower > 0)
                            {
                                <span class="item-stat" title="Magic Power - Increases your magic maximum damage">
                                    <i class="fas fa-hand-holding-magic"></i>
                                    @item.MagicPower
                                </span>
                            }
                            @if (item.ArmorPower > 0)
                            {
                                <span class="item-stat" title="Armor Power - Decreases the hit rate of your attacker"><i class="fas fa-shield"></i>@item.ArmorPower</span>
                            }
                        </td>
                        <td class='item level-requirement'>
                            @if (item.RequiredSlayerLevel > 0)
                            {
                                <span class="item-stat" title="Required Slayer Level">
                                    <i class="fas fa-skull"></i>
                                    @item.RequiredSlayerLevel
                                </span>
                            }
                            @if (item.RequiredAttackLevel > 0)
                            {
                                <span class="item-stat" title="Required Attack Level">
                                    <i class="fas fa-swords"></i>
                                    @item.RequiredAttackLevel
                                </span>
                            }
                            @if (item.RequiredDefenseLevel > 0)
                            {
                                <span class="item-stat" title="Required Defense Level">
                                    <i class="fas fa-shield"></i>
                                    @item.RequiredDefenseLevel
                                </span>
                            }
                            @if (item.RequiredMagicLevel > 0)
                            {
                                <span class="item-stat" title="Required Magic Level">
                                    <i class="fas fa-hand-holding-magic"></i>
                                    @item.RequiredMagicLevel
                                </span>
                            }
                            @if (item.RequiredRangedLevel > 0)
                            {
                                <span class="item-stat" title="Required Ranged Level">
                                    <i class="fas fa-bow-arrow"></i>
                                    @item.RequiredRangedLevel
                                </span>
                            }
                        </td>
                        <td class='item category'>@item.Category</td>
                        <td class='item type'>@item.Type</td>
                        <td class='item material'>@item.Material</td>
                        <td class='item shop-sell-price'>@item.ShopSellPrice&nbsp;<img class="ravenCoins" src="/favicon.png" /></td>
                        <td class='item recipe'>
                            @{
                                var drop = ItemService.GetResourceItemDrop(item.Id);
                                if (drop != null)
                                {
                                    <div class="drop-details">
                                        <label class='drop-label'>Dropped from</label>
                                        <div class="drop-skill-level">
                                            <label>@drop.RequiredSkill.ToString() Level </label>
                                            <span class='drop-level-requirement'>@drop.LevelRequirement</span>
                                        </div>
                                    </div>
                                }

                                var itemRecipe = ItemService.GetItemRecipe(item.Id);
                                if (itemRecipe != null)
                                {
                                    <div class="recipe-details">
                                        <div class="crafting-level">
                                            <label>@itemRecipe.RequiredSkill.ToString() Level </label>
                                            <span class='crafting-level-requirement'>@itemRecipe.RequiredLevel</span>
                                        </div>
                                        <div class="crafting-ingredients">
                                            @{
                                                var ingredients = itemRecipe.Ingredients;
                                                foreach (var req in ingredients)
                                                {
                                                    var reqItem = availableItems.First(x => x.Id == req.ItemId);
                                                    <span><a href="/items/@reqItem.Id">@(reqItem.Name)</a> x@(req.Amount)&nbsp;</span>
                                                }
                                            }
                                        </div>
                                    </div>
                                }

                                // check if part of recipes.
                                // check if this is part of a recipe, if so, show the recipe
                                <div class="recipe-list">
                                    @{
                                        var itemRecipes = ItemService.GetItemRecipesByIngredient(item.Id);
                                        if (itemRecipes != null && itemRecipes.Count > 0)
                                        {
                                            <label class='recipe-list-label'>Ingredient in</label>
                                            @foreach (var r in itemRecipes)
                                            {
                                                <span><a href="/items/@r.ItemId">@(r.Name)</a>&nbsp;</span>
                                            }
                                        }
                                    }
                                </div>
                            }
                        </td>
                        <td class='item actions'>
                            <button class="btn" title="remove all possessions" @onclick="(() => RemovePossessions(item))">
                                <i class="fa-duotone fa-broom-wide"></i>
                            </button>
                            <button class="btn" @onclick="(() => EditItem(item))">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn" @onclick="(() => HandleRemoveItem(item.Id))">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    private ItemEdit editedItem = new ItemEdit();
    private EditContext context;

    private string updateError = "";
    private bool isAdmin;
    private bool ItemEditorVisible;

    private ItemEditTab activeTab;

    private string jsonPresentation;
    private string unmodifiedJson;

    private RavenNest.Models.SessionInfo session;
    private RavenNest.Models.ItemCollection availableItems;
    private RavenNest.Models.ItemCollection items;
    private ItemFilter itemFilter = ItemFilter.All;

    private void ShowForm()
    {
        if (unmodifiedJson != jsonPresentation)
        {
            // try rebuild item from json
            try
            {
                editedItem = Newtonsoft.Json.JsonConvert.DeserializeObject<ItemEdit>(jsonPresentation);
                CreateContext();
            }
            catch { }
        }
        activeTab = ItemEditTab.Form;
        StateHasChanged();
    }

    private void ShowJson()
    {
        unmodifiedJson = jsonPresentation;
        activeTab = ItemEditTab.Json;
    }

    private void CreateContext()
    {
        UpdateJsonPresentation();
        if (context != null)
        {
            context.OnFieldChanged -= OnFieldChanged;
        }
        context = new EditContext(editedItem);
        context.OnFieldChanged += OnFieldChanged;
    }

    private void OnFieldChanged(object sender, FieldChangedEventArgs evt)
    {
        UpdateJsonPresentation();
    }

    private void UpdateJsonPresentation()
    {
        jsonPresentation = Newtonsoft.Json.JsonConvert.SerializeObject(editedItem, Newtonsoft.Json.Formatting.Indented);
    }

    protected override async Task OnInitializedAsync()
    {
        CreateContext();
        session = AuthService.GetSession();
        isAdmin = session != null && session.Administrator;
        await LoadItems();
    }

    private void SelectItemFilter(ItemFilter newItemFilter)
    {
        itemFilter = newItemFilter;
        items = new Models.ItemCollection(availableItems.Where(x => Filter(x)).OrderBy(x => x.Name));
        InvokeAsync(StateHasChanged);
    }

    private bool ItemImageExists()
    {
        //var fileName = ItemService.GetItemImage(editedItem.IdString, editedItem.Name);
        //return File.Exists(fileName);
        var pathId = Path.Combine(Environment.WebRootPath, "imgs", "items", editedItem.IdString + ".png");
        var pathName = Path.Combine(Environment.WebRootPath, "imgs", "items", editedItem.Name.ToLower().Replace(" ", "-").Replace("'", "") + ".png");
        return File.Exists(pathName) || File.Exists(pathId);
    }

    private async void RemovePossessions(RavenNest.Models.Item item)
    {
        var totalPossesionCount = ItemService.GetPossessionCount(item.Id);
        if (totalPossesionCount == 0)
        {
            return;
        }

        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear all " + totalPossesionCount + " possessions (marketplace, vendors, stash, inventories) for " + item.Name + "?");
        if (!confirm)
        {
            return;
        }

        await ItemService.ClearPossessionsAsync(item.Id);

        StateHasChanged();
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        if (e.File.ContentType != "image/png")
        {
            updateError = "Only PNG images are supported.";
            return;
        }

        var fileName = editedItem.Id + ".png";
        if (!string.IsNullOrEmpty(editedItem.Name))
            fileName = editedItem.Name.ToLower().Replace(" ", "-").Replace("'", "") + ".png";
        var path = Path.Combine(Environment.WebRootPath, "imgs", "items", fileName);
        if (File.Exists(path))
        {
            bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "An existing image already exists and this action will replace it. Are you sure?");
            if (!confirm)
            {
                return;
            }
        }

        await using FileStream fs = new(path, FileMode.Create);
        await browserFile.OpenReadStream().CopyToAsync(fs);

        StateHasChanged();
    }

    private void CreateNewItem()
    {
        var id = Guid.NewGuid();
        editedItem = new ItemEdit()
            {
                Id = id,
            };

        CreateContext();
        ItemEditorVisible = true;
    }
    private void EditItem(RavenNest.Models.Item item)
    {
        editedItem = DataMapper.Map<ItemEdit>(DataMapper.Clone(item));

        if (editedItem.ShopBuyPrice <= 0)
        {
            editedItem.ShopBuyPrice = GameMath.CalculateVendorBuyPrice(item, 0);
        }

        CreateContext();
        ItemEditorVisible = true;
    }
    private bool CanHaveDefensiveStats()
    {
        return editedItem.Category == ItemCategory.Ring || editedItem.Category == ItemCategory.Amulet || editedItem.Category == ItemCategory.Armor || editedItem.Category == ItemCategory.Skin;
    }

    private bool CanHaveOffensiveStats()
    {
        return editedItem.Category == ItemCategory.Ring || editedItem.Category == ItemCategory.Amulet || editedItem.Category == ItemCategory.Weapon || editedItem.Category == ItemCategory.Skin;
    }

    private bool CanBeEquipped()
    {
        return editedItem.Category == ItemCategory.Ring || editedItem.Category == ItemCategory.Amulet || editedItem.Category == ItemCategory.Weapon || editedItem.Category == ItemCategory.Armor || editedItem.Category == ItemCategory.Skin;
    }


    private async Task HandleRemoveItem(Guid itemId)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (!confirm)
        {
            return;
        }

        var result = await ItemService.DeleteItemAsync(itemId);
        if (result)
        {
            await LoadItems();
            updateError = "";
        }
        else
        {
            updateError = "Failed to delete item";
        }

        StateHasChanged();
    }

    private async void HandleSaveItem()
    {
        //if (context.IsModified())
        {
            if (!string.IsNullOrEmpty(editedItem.IdString) && Guid.TryParse(editedItem.IdString, out var newId))
            {
                editedItem.Id = newId;
            }

            var result = await ItemService.AddOrUpdateItemAsync(editedItem);
            if (result)
            {
                await LoadItems();
                updateError = "";
            }
            else
            {
                updateError = "Failed to update or create item";
            }

            ItemEditorVisible = false;
            StateHasChanged();
        }
    }

    private async Task LoadItems()
    {
        availableItems = new Models.ItemCollection((await ItemService.GetItemsAsync()).OrderBy(x => x.Name));

        if (itemFilter == ItemFilter.All)
        {
            items = new Models.ItemCollection(availableItems.OrderBy(x => x.Name));
            return;
        }

        SelectItemFilter(itemFilter);
    }

    private bool Filter(Models.Item item)
    {
        return ItemService.Filter(itemFilter, item);
    }

    public class ItemEdit : RavenNest.Models.Item
    {
        public string IdString
        {
            get => Id.ToString();
            set
            {
                if (!string.IsNullOrEmpty(value) && Guid.TryParse(value, out var newId))
                {
                    Id = newId;
                }
            }
        }
    }

    public enum ItemEditTab
    {
        Form,
        Json
    }
}