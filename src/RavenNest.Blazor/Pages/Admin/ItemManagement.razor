@layout AdminLayout
@page "/admin/items"
@using RavenNest.Models;
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.ItemService ItemService
@inject IJSRuntime JsRuntime

@if (isAdmin)
{

    @if (ItemEditorVisible)
    {
        <div class="item-editor-background">
            <div class="item-editor-modal">
                <EditForm Model="editedItem" OnValidSubmit="HandleSaveItem">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <InputText id="name" @bind-Value="editedItem.Name" />

                    <InputNumber id="level" @bind-Value="editedItem.Level" />


                    @*<InputCheck id="level" @bind-Value="editedItem.Soulbound" />*@

                    <!-- ... repeat for all other fields ... -->

                    <InputSelect id="itemCategory" @bind-Value="editedItem.Category">
                        @foreach (var option in Enum.GetValues<ItemCategory>())
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>

                    <InputSelect id="itemType" @bind-Value="editedItem.Type">
                        @foreach (var option in Enum.GetValues<ItemType>())
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>

                    <InputSelect id="itemMaterial" @bind-Value="editedItem.Material">
                        @foreach (var option in Enum.GetValues<ItemMaterial>())
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>

                    <div class="crafting-requirements">

                        @if (editedItem.CraftingRequirements != null)
                        {
                            foreach (var req in editedItem.CraftingRequirements)
                            {
                                <div class="crafting-requirement">
                                    <InputSelect @bind-Value="req.ResourceItemId">
                                        @foreach (var item in items)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </InputSelect>
                                    <InputNumber @bind-Value="req.Amount" />
                                    <button @onclick="(() => RemoveCraftingRequirement(req))">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            }
                        }

                    </div>
                    <button type="submit">Save</button>
                </EditForm>
                <button @onclick="AddCraftingRequirement">Add Crafting Requirement</button>
                <button @onclick="(() => ItemEditorVisible = false)">Close</button>
            </div>
        </div>
    }

    @if (items == null)
    {
        <span>Loading items... Please wait</span>
        <LoadIndicator></LoadIndicator>
    }
    else
    {
        <button @onclick="CreateNewItem">Create New Item</button>
        <table class="items-list">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Stats</th>
                    <th>Level Req</th>
                    <th>Category</th>
                    <th>Item Type</th>
                    <th>Material Type</th>
                    <th>Crafting Level</th>
                    <th>Vendor Price</th>
                    <th>Crafting Requirements</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in items)
                {
                    <tr id="@item.Id" class="item-row">
                        <td><img src="/imgs/items/@(item.Id).png" style="width: 40px" /></td>
                        <td class='item'>@item.Name</td>
                        <td class='item'>
                            @if (item.WeaponAim > 0)
                            {
                                <span class="item-stat" title="Weapon Aim - Increases your hit rate in melee"><i class="fas fa-crosshairs"></i>@item.WeaponAim</span>
                            }
                            @if (item.WeaponPower > 0)
                            {
                                <span class="item-stat" title="Weapon Power - Increases your maximum damage in melee"><i class="fas fa-swords"></i>@item.WeaponPower</span>
                            }
                            @if (item.RangedAim > 0)
                            {
                                <span class="item-stat" title="Ranged Aim - Increases your ranged hit rate"><i class="fas fa-crosshairs"></i>@item.RangedAim</span>
                            }
                            @if (item.RangedPower > 0)
                            {
                                <span class="item-stat" title="Ranged Power - Increases your ranged maximum damage"><i class="fas fa-bow-arrow"></i>@item.RangedPower</span>
                            }
                            @if (item.MagicAim > 0)
                            {
                                <span class="item-stat" title="Magic Aim - Increases your magic hit rate">
                                    <i class="fas fa-wand"></i>@item.MagicAim
                                </span>
                            }
                            @if (item.MagicPower > 0)
                            {
                                <span class="item-stat" title="Magic Power - Increases your magic maximum damage">
                                    <i class="fas fa-hand-holding-magic"></i>
                                    @item.MagicPower
                                </span>
                            }
                            @if (item.ArmorPower > 0)
                            {
                                <span class="item-stat" title="Armor Power - Decreases the hit rate of your attacker"><i class="fas fa-shield"></i>@item.ArmorPower</span>
                            }
                        </td>
                        <td class='item'>
                            @if (item.RequiredAttackLevel > 0)
                            {
                                <span class="item-stat" title="Required Attack Level">
                                    <i class="fas fa-swords"></i>
                                    @item.RequiredAttackLevel
                                </span>
                            }
                            @if (item.RequiredDefenseLevel > 0)
                            {
                                <span class="item-stat" title="Required Defense Level">
                                    <i class="fas fa-shield"></i>
                                    @item.RequiredDefenseLevel
                                </span>
                            }
                            @if (item.RequiredMagicLevel > 0)
                            {
                                <span class="item-stat" title="Required Magic Level">
                                    <i class="fas fa-hand-holding-magic"></i>
                                    @item.RequiredMagicLevel
                                </span>
                            }
                            @if (item.RequiredRangedLevel > 0)
                            {
                                <span class="item-stat" title="Required Ranged Level">
                                    <i class="fas fa-bow-arrow"></i>
                                    @item.RequiredRangedLevel
                                </span>
                            }
                        </td>
                        <td class='item'>@item.Category</td>
                        <td class='item'>@item.Type</td>
                        <td class='item'>@item.Material</td>
                        <td class='item'>@item.RequiredCraftingLevel</td>
                        <td class='item'>@item.ShopSellPrice&nbsp;<img class="ravenCoins" src="/favicon.png" /></td>
                        <td class='item'>
                            @foreach (var req in item.CraftingRequirements)
                            {
                                var reqItem = items.First(x => x.Id == req.ResourceItemId);
                                <span>@(reqItem.Name) x@(req.Amount)&nbsp;</span>
                            }
                        </td>
                        <td class='item'>
                            <button @onclick="(() => EditItem(item))">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button @onclick="(() => HandleRemoveItem(item.Id))">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    private RavenNest.Models.Item editedItem = new RavenNest.Models.Item();

    private string updateError = "";
    private bool isAdmin;
    private bool ItemEditorVisible;

    private RavenNest.Models.SessionInfo session;
    private RavenNest.Models.ItemCollection items;

    private void CreateNewItem()
    {
        editedItem = new RavenNest.Models.Item()
            {
                CraftingRequirements = new List<ItemCraftingRequirement>()
            };
        ItemEditorVisible = true;
    }

    private void EditItem(RavenNest.Models.Item item)
    {
        editedItem = item;
        ItemEditorVisible = true;
    }

    private async Task RemoveCraftingRequirement(ItemCraftingRequirement req)
    {
        if (editedItem == null) return;
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this requirement?");
        if (!confirm)
        {
            return;
        }
        editedItem.CraftingRequirements.Remove(req);
        StateHasChanged();
    }

    private async Task HandleRemoveItem(Guid itemId)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (!confirm)
        {
            return;
        }

        var result = await ItemService.DeleteItemAsync(itemId);
        if (result)
        {
            items = new Models.ItemCollection((await ItemService.GetItemsAsync()).OrderBy(x => x.Name));
            updateError = "";
        }
        else
        {
            updateError = "Failed to delete item";
        }

        StateHasChanged();
    }

    private async void HandleSaveItem()
    {
        var result = await ItemService.AddOrUpdateItemAsync(editedItem);
        if (result)
        {
            items = new Models.ItemCollection((await ItemService.GetItemsAsync()).OrderBy(x => x.Name));
            updateError = "";
        }
        else
        {
            updateError = "Failed to update or create item";
            // Handle error
        }
        ItemEditorVisible = false;
        StateHasChanged();
    }

    private void AddCraftingRequirement()
    {
        editedItem.CraftingRequirements.Add(new ItemCraftingRequirement());
    }

    protected override void OnInitialized()
    {
        session = AuthService.GetSession();
        isAdmin = session != null && session.Administrator;
        LoadItems();
    }

    private async void LoadItems()
    {
        items = new Models.ItemCollection((await ItemService.GetItemsAsync()).OrderBy(x => x.Name));
        StateHasChanged();
    }
}