@layout AdminLayout
@page "/admin/items"
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.ItemService ItemService

@if (isAdmin)
{

    @if (ItemEditorVisible)
    {
        <div class="item-editor-background">

            <div class="item-editor-modal">
            </div>

        </div>
    }

        <div class="item-create">
        <p>Paste json of item to update or add.</p>
        <EditForm Model="@createItem" OnValidSubmit="@HandleUpdateItem">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputTextArea rows="5" id="name" @bind-Value="createItem.Json" />
        <button type="submit">Submit</button>
        </EditForm>
        <p class="item-name-error">@updateError</p>
        </div>


    @if (items == null)
    {
        <span>Loading items... Please wait</span>
        <LoadIndicator></LoadIndicator>
    }
    else
    {

        <table class="items-list">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Stats</th>
                    <th>Level Req</th>
                    <th>Category</th>
                    <th>Item Type</th>
                    <th>Material Type</th>
                    <th>Crafting Level</th>
                    <th>Vendor Price</th>
                    <th>Crafting Requirements</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in items)
                {
                    <tr id="@item.Id" class="item-row">
                        <td><img src="/imgs/items/@(item.Id).png" style="width: 40px" /></td>
                        <td class='item'>@item.Name</td>
                        <td class='item'>
                            @if (item.WeaponAim > 0)
                            {
                                <span class="item-stat" title="Weapon Aim - Increases your hit rate in melee"><i class="fas fa-crosshairs"></i>@item.WeaponAim</span>
                            }
                            @if (item.WeaponPower > 0)
                            {
                                <span class="item-stat" title="Weapon Power - Increases your maximum damage in melee"><i class="fas fa-swords"></i>@item.WeaponPower</span>
                            }
                            @if (item.RangedAim > 0)
                            {
                                <span class="item-stat" title="Ranged Aim - Increases your ranged hit rate"><i class="fas fa-crosshairs"></i>@item.RangedAim</span>
                            }
                            @if (item.RangedPower > 0)
                            {
                                <span class="item-stat" title="Ranged Power - Increases your ranged maximum damage"><i class="fas fa-bow-arrow"></i>@item.RangedPower</span>
                            }
                            @if (item.MagicAim > 0)
                            {
                                <span class="item-stat" title="Magic Aim - Increases your magic hit rate">
                                    <i class="fas fa-wand"></i>@item.MagicAim
                                </span>
                            }
                            @if (item.MagicPower > 0)
                            {
                                <span class="item-stat" title="Magic Power - Increases your magic maximum damage">
                                    <i class="fas fa-hand-holding-magic"></i>
                                    @item.MagicPower
                                </span>
                            }
                            @if (item.ArmorPower > 0)
                            {
                                <span class="item-stat" title="Armor Power - Decreases the hit rate of your attacker"><i class="fas fa-shield"></i>@item.ArmorPower</span>
                            }
                        </td>
                        <td class='item'>
                            @if (item.RequiredAttackLevel > 0)
                            {
                                <span class="item-stat" title="Required Attack Level">
                                    <i class="fas fa-swords"></i>
                                    @item.RequiredAttackLevel
                                </span>
                            }
                            @if (item.RequiredDefenseLevel > 0)
                            {
                                <span class="item-stat" title="Required Defense Level">
                                    <i class="fas fa-shield"></i>
                                    @item.RequiredDefenseLevel
                                </span>
                            }
                            @if (item.RequiredMagicLevel > 0)
                            {
                                <span class="item-stat" title="Required Magic Level">
                                    <i class="fas fa-hand-holding-magic"></i>
                                    @item.RequiredMagicLevel
                                </span>
                            }
                            @if (item.RequiredRangedLevel > 0)
                            {
                                <span class="item-stat" title="Required Ranged Level">
                                    <i class="fas fa-bow-arrow"></i>
                                    @item.RequiredRangedLevel
                                </span>
                            }
                        </td>
                        <td class='item'>@item.Category</td>
                        <td class='item'>@item.Type</td>
                        <td class='item'>@item.Material</td>
                        <td class='item'>@item.RequiredCraftingLevel</td>
                        <td class='item'>@item.ShopSellPrice&nbsp;<img class="ravenCoins" src="/favicon.png" /></td>
                        <td class='item'>
                            @foreach (var req in item.CraftingRequirements)
                            {
                                var reqItem = items.First(x => x.Id == req.ResourceItemId);
                                <span>@(reqItem.Name) x@(req.Amount)&nbsp;</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    private CreateItemModel createItem = new CreateItemModel();

    private string updateError = "";
    private bool isAdmin;
    private bool ItemEditorVisible;

    private SessionInfo session;
    private RavenNest.Models.ItemCollection items;

    private async void HandleUpdateItem()
    {
        if (!string.IsNullOrEmpty(createItem.Json))
        {
            RavenNest.Models.Item item = null;
            try
            {
                item = Newtonsoft.Json.JsonConvert.DeserializeObject<RavenNest.Models.Item>(createItem.Json);
            }
            catch (Exception exc)
            {
                updateError = exc.ToString();
                return;
            }

            if (item == null)
            {
                updateError = "Not a valid item JSON";
                return;
            }

            var result = await ItemService.AddOrUpdateItemAsync(item);
            if (result)
            {
                items = new Models.ItemCollection((await ItemService.GetItemsAsync()).OrderBy(x => x.Name));
                updateError = "OK";
            }
            else
            {
                updateError = "Failed to update or create item";
            }
            StateHasChanged();
        }
    }


    protected override void OnInitialized()
    {
        session = AuthService.GetSession();
        isAdmin = session != null && session.Administrator;
        LoadItems();
    }

    private async void LoadItems()
    {
        items = new Models.ItemCollection((await ItemService.GetItemsAsync()).OrderBy(x => x.Name));
        StateHasChanged();
    }


    public class CreateItemModel
    {
        public string Json { get; set; }
    }

}