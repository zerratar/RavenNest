@layout AdminLayout
@page "/admin/sessions"
@using RavenNest.BusinessLogic.Extensions
@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.BusinessLogic.Data.GameData GameData
@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject RavenNest.Blazor.Services.SessionService SessionService

@if (isAdmin)
{
    <div>
        <label>Hide Inactive Sessions</label>
        <input type="checkbox" value="@activeSessionsOnly" @onchange="ev => ActiveSessionsOnlyChanged(ev.Value)">
    </div>
    @if (gameSessions == null || loading)
    {
        <h1>Game Sessions</h1>
        <LoadIndicator></LoadIndicator>
    }
    else
    {
        <h1>Game Sessions (@gameSessions.Count)</h1>
        <table class="table">
            <thead>
                <tr>
                    <th>Owner</th>
                    <th>Status</th>
                    <th>Started</th>
                    <th>Exp Req</th>
                    <th>State Req</th>
                    <th>Uptime</th>
                    <th>Admin</th>
                    <th>Mod</th>
                    <th>Client Version</th>
                    <th>Players (@gameSessions.Sum(x => x != null && x.Players != null ? x.Players.Count : 0))</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var session in gameSessions)
                {
                    @if (session == null)
                    {
                        continue;
                    }
                    <tr class="table-row">
                        <td><span>Twitch: @session.TwitchUserId</span> <span>@session.UserName</span></td>
                        <td>@GetSessionStatus(session.Status)</td>
                        <td>@session.Started</td>
                        <td>@GetLastUpdateStringShort(session.LastExpRequest)</td>
                        <td>@GetLastUpdateStringShort(session.LastStateRequest)</td>
                        <td>@GetUptime(session)</td>
                        <td>@session.AdminPrivileges</td>
                        <td>@session.ModPrivileges</td>
                        <td>@session.ClientVersion</td>
                        <td @onclick="()=>ShowPlayerList(session)">@session.Players.Count</td>
                        <td>
                            <button title="(TEST) Make this user initiate a Raid against our game session" class="inline-button raid" @onclick="(()=> RaidOurSession(session))"><i class="fa-solid fa-people-group"></i> Raid</button>
                            <button title="(TEST) Make this user initiate a Raid War against our game session" class="inline-button raidwar" @onclick="(()=> RaidWarOurSession(session))"><i class="fa-solid fa-swords"></i> War</button>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    }

    @if (playerListVisible)
    {
        <div class="player-list-modal">
            <div class="player-list-modal-header">
                @if (inspectingSession != null)
                {
                    <h3>@(inspectingSession.UserName + " - " + (inspectingSession.Players?.Count ?? 0) + " players")</h3>
                }
                <div @onclick="HidePlayerList" class="btn-close">&times;</div>
            </div>
            <div class="player-list">
                @if (inspectingSession != null)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>User Name</th>
                                <th>Administrator</th>
                                <th>Moderator</th>
                                <th>Last Req</th>
                                <th>Last Saved</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                if (inspectingSession.Players != null)
                                {
                                    foreach (var player in inspectingSession.Players)
                                    {
                                        <tr class="table-row">
                                            <td>@player.UserName</td>
                                            <td>@player.IsAdmin</td>
                                            <td>@player.IsModerator</td>
                                            <td>
                                                <div class="last-updated">@GetLastUpdateStringShort(player.LastExpSaveRequest)</div>
                                            </td>
                                            <td>
                                                <div class="last-updated">@GetLastUpdateStringShort(player.LastExpUpdate)</div>
                                            </td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }
}

@code {
    private RavenNest.Models.SessionInfo session;
    private RavenNest.Models.GameSession inspectingSession;
    private bool isAdmin;
    private bool playerListVisible;
    private bool loading = false;
    private IReadOnlyList<RavenNest.Models.GameSession> gameSessions;
    private DateTime UtcNow = DateTime.UtcNow;

    private bool activeSessionsOnly = true;

    protected override void OnInitialized()
    {
        session = AuthService.GetSession();
        isAdmin = session != null && session.Administrator;
        if (isAdmin)
        {
            activeSessionsOnly = true;
            LoadGameSessionsAsync();
        }
    }

    private async void ActiveSessionsOnlyChanged(object value)
    {
        activeSessionsOnly = (bool)value;
        await LoadGameSessionsAsync();
    }


    private void RaidOurSession(RavenNest.Models.GameSession session)
    {
        SessionService.InitiateRaid(session);
    }

    private void RaidWarOurSession(RavenNest.Models.GameSession session)
    {
        SessionService.InitiateRaidWar(session);
    }


    public string GetLastUpdateStringShort(DateTime update)
    {
        var elapsed = UtcNow - update;
        if (update <= DateTime.UnixEpoch)
        {
            return "";
        }

        if (elapsed.TotalHours >= 24)
        {
            return (int)elapsed.TotalDays + " days ago";
        }

        if (elapsed.TotalHours >= 1)
        {
            return (int)elapsed.TotalHours + " hours ago";
        }

        if (elapsed.TotalMinutes >= 1)
        {
            return (int)elapsed.TotalMinutes + " minutes ago";
        }

        return (int)elapsed.TotalSeconds + " seconds ago";
    }

    public string GetLastUpdateString(DateTime update)
    {
        var elapsed = UtcNow - update;
        if (update <= DateTime.UnixEpoch)
        {
            return "";
        }

        var prefix = "Exp Last updated: ";
        return prefix + GetLastUpdateStringShort(update);
    }

    private void HidePlayerList()
    {
        playerListVisible = false;
        InvokeAsync(StateHasChanged);
    }

    private void ShowPlayerList(RavenNest.Models.GameSession data)
    {
        inspectingSession = data;
        inspectingSession.AvgSaveTime = TimeSpan.FromSeconds(data.Players.Average(x => (UtcNow - x.LastExpUpdate).TotalSeconds));
        playerListVisible = true;
        InvokeAsync(StateHasChanged);
    }

    private string GetUptime(RavenNest.Models.GameSession session)
    {
        return FormatTime(DateTime.UtcNow - session.Started);
    }

    private string FormatTime(TimeSpan time)
    {
        if (time.TotalSeconds < 60) return "<1 minute";
        if (time.TotalMinutes < 60)
            return (int)Math.Floor(time.TotalMinutes) + " minutes";
        if (time.TotalHours < 24)
            return Math.Round(time.TotalHours, 2) + " hours";
        return $"{time.Days} days, {time.Hours} hours, {time.Minutes} minutes";
    }

    private string GetSessionStatus(int status)
    {
        if (status == 0)
        {
            return "Active";
        }

        return "Ended";
    }

    private async Task LoadGameSessionsAsync()
    {
        loading = true;
        gameSessions = await SessionService.GetGameSessionsAsync(activeSessionsOnly);
        loading = false;
        UtcNow = DateTime.UtcNow;
        await InvokeAsync(StateHasChanged);
    }
}
