@using RavenNest.BusinessLogic.Extended
@using RavenNest.Models
<h3>Inventory</h3>
<div class="player-inventory">
  <div>
    <h2>Equipped</h2>
    <div class="inventory-items">
      @foreach (var item in GetEquippedItems())
      {
        <div class="inventory-item equipped">
          <div class="item-image" data-item="@item.Id" @onmouseover="(()=>MouseOverItem(item))" @onmouseout="(()=>MouseExitItem(item))"><img src="@GetItemImage(item.ItemId, item.Tag)" /></div>
          <ItemTooltip Item="item" Visible="@(item.Id == tooltipItem)"></ItemTooltip>
        </div>
      }
    </div>
  </div>

  <div>
    <h2>Inventory</h2>
    <div class="inventory-items inventory">
      @foreach (var item in GetInventoryItems())
      {
        <div class="inventory-item">
          <div class="item-image" data-item="@item.Id" @onmouseover="(()=>MouseOverItem(item))" @onmouseout="(()=>MouseExitItem(item))"><img src="@GetItemImage(item.ItemId, item.Tag)" /></div>
          <div class="item-amount">@GetItemAmount(item)</div>
          <ItemTooltip Item="item" Visible="@(item.Id == tooltipItem)"></ItemTooltip>
        </div>
      }
    </div>
  </div>
</div>

@code {
  [Parameter]
  public WebsitePlayer Player { get; set; }
  
  [Parameter]
  public bool CanManage { get; set; }

  private Guid tooltipItem;

  public IReadOnlyList<Models.InventoryItem> GetInventoryItems()
  {
    return Player.InventoryItems.Where(x => !x.Equipped).ToList();
  }

  public IReadOnlyList<Models.InventoryItem> GetEquippedItems()
  {
    return Player.InventoryItems.Where(x => x.Equipped).ToList();
  }

  public void MouseOverItem(InventoryItem item)
  {
    tooltipItem = item.Id;
  }

  public void MouseExitItem(InventoryItem item)
  {
    tooltipItem = Guid.Empty;
  }

  public string GetItemImage(Guid itemId, string tag)
  {
    if (tag != null)
    {
      return $"/api/twitch/logo/{tag}";
    }
    return $"/imgs/items/{itemId}.png";
  }

  public string GetItemAmount(InventoryItem item)
  {
    var value = item.Amount;
    if (value >= 1000_000)
    {
      var mils = value / 1000000.0;
      return Math.Round(mils) + "M";
    }
    else if (value > 1000)
    {
      var ks = value / 1000m;
      return Math.Round(ks) + "K";
    }

    return item.Amount.ToString();
  }
}
