@using RavenNest.BusinessLogic.Extended
@using RavenNest.Models
@using RavenNest.Blazor.Services
@using Blazored.Typeahead

@inject RavenNest.Blazor.Services.AuthService AuthService
@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject RavenNest.Blazor.Services.ItemService ItemService

<div class="player-inventory">
    <div class="equipped-items">
        <h2>Equipped</h2>
        <div class="inventory-items">
            @foreach (var item in GetEquippedItems())
            {
                <div class="inventory-item equipped @GetEnchantedItemClass(item.Enchantment)" @onclick="(()=>ShowItemDetails(item))">
                    <div class="item-image" data-item="@item.Id"><img src="@GetItemImage(item.ItemId, item.Tag)" /></div>
                </div>
            }
        </div>
    </div>

    <div class="unequipped-items">

        @if (CanModify)
        {
            <div class="inventory-management">
                <button @onclick="ShowAddItem" class="btn btn-primary">Add item</button>
            </div>
        }

        <h2>Inventory</h2>

        <div class="item-filters">
            <button class="item-filter @(itemFilter == ItemFilter.All ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.All)">
                <span class="item-filter-text">All</span>
                <i class="fa-sharp fa-solid fa-rectangles-mixed"></i>
            </button>
            <button class="item-filter @(itemFilter == ItemFilter.Swords ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Swords)">
                <span class="item-filter-text">Swords</span>
                <i class="fa-sharp fa-solid fa-sword"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Bows ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Bows)">
                <span class="item-filter-text">Bows</span>
                <i class="fa-sharp fa-solid fa-bow-arrow"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Staves ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Staves)">
                <span class="item-filter-text">Staves</span>
                <i class="fa-sharp fa-solid fa-staff"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Shields ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Shields)">
                <span class="item-filter-text">Shields</span>
                <i class="fa-sharp fa-solid fa-shield"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Armors ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Armors)">
                <span class="item-filter-text">Armors</span>
                <i class="fa-sharp fa-solid fa-helmet-battle"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Accessories ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Accessories)">
                <span class="item-filter-text">Accessories</span>
                <i class="fa-sharp fa-solid fa-gem"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Pets ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Pets)">
                <span class="item-filter-text">Pets</span>
                <i class="fa-sharp fa-solid fa-dog"></i>
            </button>

            <button class="item-filter @(itemFilter == ItemFilter.Resources ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Resources)">
                <span class="item-filter-text">Resources</span>
                <i class="fa-sharp fa-solid fa-hammer"></i>
            </button>


            <button class="item-filter @(itemFilter == ItemFilter.Scrolls ? "active-filter" : "")" @onclick="() => SelectItemFilter(ItemFilter.Scrolls)">
                <span class="item-filter-text">Scrolls</span>
                <i class="fa-sharp fa-solid fa-scroll"></i>
            </button>
        </div>

        <div class="inventory-items inventory">
            @foreach (var item in GetInventoryItems())
            {
                <div class="inventory-item @GetEnchantedItemClass(item.Enchantment)" @onclick="(()=>ShowItemDetails(item))">
                    <div class="item-image" data-item="@item.Id"><img src="@GetItemImage(item.ItemId, item.Tag)" /></div>
                    @if (item.Amount > 1)
                    {
                        <div class="item-amount">@GetItemAmount(item)</div>
                    }
                </div>
            }
        </div>

        @if (vendorConfirmationDialogVisible)
        {
            <div class="item-details-dialog-container vendor">
                <div class="item-details-dialog-background" @onclick="CloseVendorDialog"></div>
                <div class="item-details-dialog vendor">
                    <div class="dialog-header">
                        <button class="close" @onclick="CloseVendorDialog">x</button>
                    </div>

                    <div class="item-details-content vendor">
                        <div class="warning-row">
                            <span>You are about to vendor</span>
                            <span class="vendor-amount">@(vendorItem.Amount + "x ")</span>
                            <span class="vendor-name">@(GetItemName(vendorItem))</span>
                            <span>for</span>
                            <span class="vendor-price">@((ItemService.GetItem(vendorItem.ItemId).ShopSellPrice * vendorItem.Amount) + " coins.")</span>
                        </div>
                        <div class="warning-row">Are you sure you want to continue?</div>
                    </div>
                    <div class="item-actions">
                        <button @onclick="CloseVendorDialog" class="btn btn-action">Cancel</button>
                        <button @onclick="Vendor" class="btn btn-action vendor">Confirm</button>
                    </div>
                </div>
            </div>
        }

        @if (itemDetailDialogVisible)
        {
            <div class="item-details-dialog-container item-view">
                <div class="item-details-dialog-background" @onclick="CloseItemDetails"></div>
                <div class="item-details-dialog">
                    <div class="dialog-header">
                        <div class="item-name" data-tier="@GetItemTier()">@GetItemName()</div>
                        <button class="close" @onclick="CloseItemDetails">x</button>
                    </div>

                    <div class="item-details-content">
                        <div class="item-type">@GetItemType()</div>
                        @if (itemDetailsDialogItem.Soulbound.GetValueOrDefault())
                        {
                            <div class="item-soulbound">Soulbound - this item can't be gifted</div>
                        }
                        <div class="item-image" data-item="@itemDetailsDialogItem.Id"><img src="@GetItemImage(itemDetailsDialogItem.ItemId, itemDetailsDialogItem.Tag)" /></div>

                        @foreach (var stat in GetItemStats())
                        {
                            <div class="item-stat">
                                <div class="item-stat-name">@stat.Name</div>
                                <div class="item-stat-value">
                                    <span>@stat.Value</span>
                                    @if (stat.Bonus > 0)
                                    {
                                        <span class="item-stat-enchantment" title="Enchantment Bonus">(+@stat.Bonus)</span>
                                    }
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(itemDetailsDialogItem.Enchantment))
                        {
                            <div class="item-enchantment-header">Enchantments</div>
                            @foreach (var stat in GetItemEnchantments())
                            {
                                <div class="item-stat enchantment">
                                    <div class="item-stat-name">@GetEnchantmentName(stat)</div>
                                    <div class="item-stat-value">+@GetEnchantmentValue(stat)</div>
                                </div>
                            }
                        }
                        <div class="item-requirement">
                            <div class="item-stat-name">@GetItemRequirementSkill()</div>
                            <div class="item-stat-value">@GetItemRequirementLevel()</div>
                        </div>
                    </div>

                    @if (CanManage)
                    {
                        <div class="item-actions">

                            @if (itemDetailsDialogItem.Equipped)
                            {
                                <button @onclick="UnequipItem" class="btn btn-action">Unequip</button>
                            }
                            else if (CanBeEquipped())
                            {
                                <button @onclick="EquipItem" class="btn btn-action">Equip</button>
                            }

                            <button @onclick="SendToStash" class="btn btn-action">@("Send " + (itemDetailsDialogItem.Amount > 1 ? itemDetailsDialogItem.Amount + " " : "") + "to stash")</button>

                            @if (characters != null)
                            {
                                foreach (var plr in characters)
                                {
                                    if (plr.Id == Player.Id)
                                    {
                                        continue;
                                    }

                                    <button @onclick="()=>SendToCharacter(plr)" class="btn btn-action">@("Send " + (itemDetailsDialogItem.Amount > 1 ? itemDetailsDialogItem.Amount + " " : "") + "to " + plr.Alias)</button>
                                }
                            }

                            @if (!itemDetailsDialogItem.Equipped)
                            {
                                <button @onclick="() => ShowVendorDialog(itemDetailsDialogItem)" class="btn btn-action vendor">@("Vendor " + (itemDetailsDialogItem.Amount > 1 ? itemDetailsDialogItem.Amount + " " : ""))</button>
                            }
                        </div>
                    }
                </div>
            </div>
        }

        @if (CanModify)
        {
            if (addItemDialogVisible)
            {
                <div class="clan-member-invite">
                    <div class="clan-member-invite-header">
                        <h2>Search for item to add</h2>
                        <button class="close" @onclick="HideAddItem">x</button>
                    </div>
                    <BlazoredTypeahead SearchMethod="SearchItem" @bind-Value="selectedItem">
                        <SelectedTemplate>
                            @context.Name
                        </SelectedTemplate>
                        <ResultTemplate>
                            @context.Name
                        </ResultTemplate>
                    </BlazoredTypeahead>

                    <div class="clan-member-invite-controls">
                        @if (selectedItem != null)
                        {
                            <button @onclick="AddItem" class="btn btn-primary">Add</button>
                        }
                        <button @onclick="HideAddItem" class="btn btn-secondary">Cancel</button>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public WebsitePlayer Player { get; set; }

    [Parameter]
    public bool CanManage { get; set; }

    private IReadOnlyList<WebsitePlayer> characters { get; set; }
    private Sessions.SessionInfo session;

    private bool itemDetailDialogVisible;
    private bool vendorConfirmationDialogVisible;

    private Models.InventoryItem itemDetailsDialogItem;
    private Models.InventoryItem vendorItem;

    private long giftOrSendAmount;

    private Item selectedItem;
    private bool addItemDialogVisible;
    private bool CanModify => session != null && session.Administrator;
    private ItemFilter itemFilter = ItemFilter.All;

    protected override async Task OnInitializedAsync()
    {
        session = AuthService.GetSession();
        characters = await PlayerService.GetMyPlayersAsync();
    }

    private void SelectItemFilter(ItemFilter newItemFilter)
    {
        itemFilter = newItemFilter;
        InvokeAsync(StateHasChanged);
    }


    public string GetEnchantedItemClass(string enchantment)
    {
        // simplify it for now
        return enchantment != null && enchantment.Length > 0 ? "enchanted" : "";
    }

    public void SendToCharacter(WebsitePlayer targetCharacter)
    {
        Player = PlayerService.SendToCharacter(Player.Id, targetCharacter.Id, itemDetailsDialogItem, itemDetailsDialogItem.Amount);

        //if (itemDetailsDialogItem.Amount == 1)
        //{
        //    Player = PlayerService.SendToCharacter(Player.Id, targetCharacter.Id, itemDetailsDialogItem, 1);
        //}
        //else
        //{
        //    // Show Send Item Amount Dialog
        //}

        CloseItemDetails();
    }

    public void Vendor()
    {
        Player = PlayerService.Vendor(Player.Id, itemDetailsDialogItem, itemDetailsDialogItem.Amount);
        CloseVendorDialog();
        CloseItemDetails();
    }

    public void SendToStash()
    {

        Player = PlayerService.SendToStash(Player.Id, itemDetailsDialogItem, itemDetailsDialogItem.Amount);

        //if (itemDetailsDialogItem.Amount == 1)
        //{
        //    Player = PlayerService.SendToStash(Player.Id, itemDetailsDialogItem, 1);
        //}
        //else
        //{
        //    // Show Send Item Amount Dialog
        //}

        CloseItemDetails();
    }

    public void UnequipItem()
    {
        Player = PlayerService.UnequipItem(Player.Id, itemDetailsDialogItem);
        CloseItemDetails();
    }

    public void EquipItem()
    {
        Player = PlayerService.EquipItem(Player.Id, itemDetailsDialogItem);
        CloseItemDetails();
    }

    public bool CanBeEquipped()
    {
        if (itemDetailsDialogItem == null)
            return false;

        var item = ItemService.GetItem(itemDetailsDialogItem.ItemId);
        if (item == null)
            return false;

        return RavenNest.BusinessLogic.Providers.PlayerInventory.CanEquipItem(item, Player);
    }

    public string GetEnchantmentValue(RavenNest.Blazor.Services.ItemEnchantment enchantment)
    {
        var value = enchantment.Value;
        if (enchantment.ValueType == AttributeValueType.Percent)
        {
            return ((int)(value * 100)) + "%";
        }

        return ((int)value).ToString();
    }

    public string GetEnchantmentName(RavenNest.Blazor.Services.ItemEnchantment enchantment)
    {
        return enchantment.Name[0] + enchantment.Name.ToLower().Substring(1);
    }

    public IReadOnlyList<RavenNest.Blazor.Services.ItemEnchantment> GetItemEnchantments()
    {
        return ItemService.GetItemEnchantments(itemDetailsDialogItem);
    }

    public IReadOnlyList<RavenNest.Blazor.Services.ItemStat> GetItemStats()
    {
        return ItemService.GetItemStats(itemDetailsDialogItem);
    }

    public string GetItemRequirementLevel()
    {
        return ItemService.GetItemRequirementLevel(itemDetailsDialogItem);
    }

    public string GetItemRequirementSkill()
    {
        return ItemService.GetItemRequirementSkill(itemDetailsDialogItem);
    }

    public string GetItemName()
    {
        return GetItemName(itemDetailsDialogItem);
    }

    public string GetItemName(Models.InventoryItem i)
    {
        if (i == null) return null;
        return i.Name ?? ItemService.GetItem(itemDetailsDialogItem.ItemId)?.Name;
    }

    public string GetItemType()
    {
        if (itemDetailsDialogItem == null) return null;
        return ItemService.GetItem(itemDetailsDialogItem.ItemId)?.Type.ToString();
    }

    public string GetItemTier()
    {
        return ItemService.GetItemTier(itemDetailsDialogItem);
    }

    public void ShowItemDetails(Models.InventoryItem item)
    {
        itemDetailDialogVisible = true;
        itemDetailsDialogItem = item;
        InvokeAsync(StateHasChanged);
    }

    public void ShowVendorDialog(Models.InventoryItem item)
    {
        vendorConfirmationDialogVisible = true;
        itemDetailDialogVisible = false;
        vendorItem = item;
        InvokeAsync(StateHasChanged);
    }

    public void CloseVendorDialog()
    {
        vendorConfirmationDialogVisible = false;
        InvokeAsync(StateHasChanged);
    }

    public void CloseItemDetails()
    {
        itemDetailDialogVisible = false;
        InvokeAsync(StateHasChanged);
    }

    public void AddItem()
    {
        if (selectedItem == null)
            return;

        HideAddItem();

        Player = PlayerService.AddItem(Player.Id, selectedItem);
        selectedItem = null;
    }

    public void HideAddItem()
    {
        addItemDialogVisible = false;
    }

    public void ShowAddItem()
    {
        addItemDialogVisible = true;
    }

    public IReadOnlyList<Models.InventoryItem> GetInventoryItems()
    {
        return Player.InventoryItems.Where(x => !x.Equipped && Filter(x)).ToList();
    }

    public IReadOnlyList<Models.InventoryItem> GetEquippedItems()
    {
        return Player.InventoryItems.Where(x => x.Equipped).ToList();
    }

    private bool Filter(Models.InventoryItem item)
    {
        if (itemFilter == ItemFilter.All)
            return true;

        return GetItemFilter(item) == itemFilter;
    }

    private ItemFilter GetItemFilter(Models.InventoryItem invItem)
    {
        var item = ItemService.GetItem(invItem.ItemId);
        if (item.Type == ItemType.Coins || item.Type == ItemType.Ore || item.Type == ItemType.Wood || item.Type == ItemType.Fish)
            return ItemFilter.Resources;

        if (item.Type == ItemType.OneHandedSword || item.Type == ItemType.TwoHandedSword)
            return ItemFilter.Swords;
        if (item.Type == ItemType.TwoHandedBow) return ItemFilter.Bows;
        if (item.Type == ItemType.TwoHandedStaff) return ItemFilter.Staves;
        if (item.Type == ItemType.Ring || item.Type == ItemType.Amulet) return ItemFilter.Accessories;
        if (item.Type == ItemType.Shield) return ItemFilter.Shields;
        if (item.Type == ItemType.Pet) return ItemFilter.Pets;
        if (item.Type == ItemType.Scroll) return ItemFilter.Scrolls;

        if (item.Category == ItemCategory.Armor)
            return ItemFilter.Armors;

        return ItemFilter.All;
    }

    public string GetItemImage(Guid itemId, string tag)
    {
        if (tag != null)
        {
            return $"/api/twitch/logo/{tag}";
        }
        return $"/imgs/items/{itemId}.png";
    }

    public string GetItemAmount(InventoryItem item)
    {
        var value = item.Amount;
        if (value >= 1000_000)
        {
            var mils = value / 1000000.0;
            return Math.Round(mils) + "M";
        }
        else if (value > 1000)
        {
            var ks = value / 1000m;
            return Math.Round(ks) + "K";
        }

        return item.Amount.ToString();
    }


    private async Task<IEnumerable<Item>> SearchItem(string searchText)
    {
        return await ItemService.SearchAsync(searchText);
    }
}
