@using RavenNest.BusinessLogic.Extended
@using System.Timers

@inject RavenNest.Blazor.Services.PlayerService PlayerService
@inject RavenNest.Blazor.Services.AuthService AuthService

<div class="player-skills">

	@if (Player.SessionInfo != null)
	{
	 <div class="training-skill">
	  <span>

				@if (!string.IsNullOrEmpty(trainingSkill))
				{
		   <span>You're currently training&nbsp;</span><b>@GetTrainingSkillName()</b><span>&nbsp;</span>
				}
				else
				{
		   <span>You're currently </span>
				}

				@if (Player.State != null)
				{
					if (Player.State.InDungeon)
					{
			   <span>in the dungeon </span>
					}
					else if (Player.State.InArena)
					{
			   <span>in the Arena </span>
					}
					else if (Player.State.InRaid)
					{
			   <span>in a Raid </span>
					}
					else if (!string.IsNullOrEmpty(Player.State.DuelOpponent))
					{
			   <span>in a duel with&nbsp;</span><b>Player.State.DuelOpponent </b>
					}
					else if (!string.IsNullOrEmpty(Player.State?.Island))
					{
			   <span>at&nbsp;</span><b>@Player.State.Island </b>
					}
					else
					{
			   <span>sailing </span>
					}
				}

				@if (!string.IsNullOrEmpty(Player.SessionInfo.OwnerUserName))
				{
		   <span>&nbsp;on&nbsp;</span><b>@Player.SessionInfo.OwnerUserName</b><span>'s stream.</span>
				}
	  </span>
	 </div>
	}

	@foreach (var skill in Player.Skills.AsList())
	{
		var isActive = IsTrainingSkill(skill);
	 <div class="stats-row@(isActive ? " active" : "")" title="@(isActive?"You're currently training this skill." : "")">
	  <div class="stats-label">@skill.Name</div>
	  <div class="stats-progress" title="@ExpDisplay(skill.Experience)">
	   <div class="stats-progress-value" style="@StyleWidth((int)(skill.Percent*120))"></div>
	   <div class="stats-progress-percent">@Math.Round(skill.Percent * 100, 2)%</div>
	  </div>

			@if (skill.Name == "Health")
			{
		  <div class="stats-value"><span class="current-health" title="Current Health">@currentHealth</span> / <span class="max-health">@skill.Level</span></div>
			}
			else
			{
		  <div class="stats-value">@skill.Level</div>
			}
	 </div>
	}
</div>

@code {
	[Parameter]
	public WebsitePlayer Player { get; set; }

	[Parameter]
	public bool CanManage { get; set; }
	private string trainingSkill;
	private int currentHealth;


	@*private Timer timer;*@

	protected override void OnParametersSet()
	{
		if (Player == null)
			return;

		if (Player.State != null)
		{
			trainingSkill = Player.State.TaskArgument ?? Player.State.Task;
			currentHealth = Player.State.Health;
		}
		else
		{
			currentHealth = Player.Skills.HealthLevel;
		}
	}
@*
	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			timer = new Timer();
			timer.Interval = 1000;
			timer.Elapsed += OnTimerInterval;
			timer.AutoReset = true;
			// Start the timer
			timer.Enabled = true;
		}
		base.OnAfterRender(firstRender);
	}

	private async void OnTimerInterval(object sender, ElapsedEventArgs e)
	{
		await UpdatePlayer();
	}

	private async Task UpdatePlayer()
	{
		try
		{
			this.Player = await PlayerService.GetPlayerAsync(Player.Id);
			await InvokeAsync(StateHasChanged);
		}
		catch
		{
			timer?.Dispose();
			timer = null;
		}
	}

	public void Dispose()
	{
		timer?.Dispose();
	}
	*@

	private string GetTrainingSkillName()
	{
		if (string.IsNullOrEmpty(trainingSkill))
			return null;

		if (trainingSkill.Equals("all", StringComparison.OrdinalIgnoreCase))
			return "All";

		if (trainingSkill.Equals("heal", StringComparison.OrdinalIgnoreCase))
			return "Healing";

		if (Player == null || Player.Skills == null)
			return null;

		var training = Player.Skills.AsList().FirstOrDefault(IsTrainingSkill);
		return training?.Name;
	}

	private bool IsTrainingSkill(PlayerSkill skill)
	{
		if (string.IsNullOrEmpty(trainingSkill))
			return false;

		if (skill.Name.StartsWith(trainingSkill, StringComparison.OrdinalIgnoreCase))
			return true;

		if (trainingSkill == "heal")
			return skill.Name.Equals("healing", StringComparison.OrdinalIgnoreCase);

		if (trainingSkill.ToLower() == "all")
			return skill.Name.Equals("attack", StringComparison.OrdinalIgnoreCase) ||
							skill.Name.Equals("defense", StringComparison.OrdinalIgnoreCase) ||
							skill.Name.Equals("strength", StringComparison.OrdinalIgnoreCase);

		if (skill.Name.ToLower() == "attack" && trainingSkill.ToLower() == "atk")
			return true;

		if (trainingSkill.ToLower() == "mine" && skill.Name.Equals("mining", StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	}

	private string ExpDisplay(double value)
	{
		return value + " exp";
	}

	private string StyleWidth(int value)
	{
		return $"width: {value}px";
	}
}
