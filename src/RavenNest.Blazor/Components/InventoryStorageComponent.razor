@using RavenNest.BusinessLogic.Extended

@switch (StorageLocation)
{
    case Location.Bank:
        <span>Stash</span>
        break;
    case Location.Equipment:
        <span>@(CharactersBag != null ? $"{GetIdentifier(CharactersBag)} - Equipment" : "")</span>
        break;
    case Location.CharactersBag:
        <span>@(CharactersBag != null ? $"{GetIdentifier(CharactersBag)} - Bag" : "")</span>
        break;
}

<div class="container-of-items @dropClass"
     @ondragover:preventDefault="true"
     @ondragover:stopPropagation="true"
     @ondragover="HandleDragOver"
     @ondrop="HandleDrop"
     @ondragenter:preventDefault="true"
     @ondragenter:stopPropagation="true"
     @ondragenter="HandleDragEnter"
     @ondragleave:preventDefault="true"
     @ondragleave:stopPropagation="true"
     @ondragleave="HandleDragLeave"
     @ondragend="HandleDragEnd">

    @if (StorageLocation.Equals(Location.Equipment))
    {
        @foreach (BusinessLogic.Providers.EquipmentSlot slot in Enum.GetValues(typeof(BusinessLogic.Providers.EquipmentSlot)))
        {
            @if (!slot.Equals(BusinessLogic.Providers.EquipmentSlot.None))
            {
                var itemInstance = GetItemInstance(slot);
                <div class="item-slot-holder equipment">
                    <div class="slot" title="{@slot.ToString()}">
                        <div class="image-holder">
                            <img class="slot-image" src="@(SetEquipmentSlotSrc(slot) ?? "/imgs/icons/inventory_slot/none.png")" />
                        </div>
                    </div>
                    @if (itemInstance != null)
                    {
                        <InventoryItemComponent Item="itemInstance" />
                    }
                </div>
            }
        }
    }
    else
    {
        @foreach (var itemInstance in ItemInstances)
        {
            <div class="item-slot-holder inventory">
                <InventoryItemComponent Item="itemInstance" />
            </div>
        }
    }
</div>
