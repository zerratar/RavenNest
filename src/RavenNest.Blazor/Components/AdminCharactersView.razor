<div class="characters">
    <h1>Character's @ViewState.ToString()</h1>
    <table class="characters-table">
        <tr>
            <th class="blank"></th>
            @foreach (var character in @Characters)
            {
                <th class="character-header">
                    <div class="character-name-info">
                        <div class="character-display-name">
                            <span class="character-name">@character.Name</span>
                            <span class="character-index">
                                @(character.Identifier != null ? $"#{character.Identifier}" : "")
                            </span>
                        </div>
                        <div class="character-combat-level">
                            <span class="character-level">@PlayerService.GetCombatLevel(character)</span>
                        </div>
                    </div>
                    <div class="character-currently">
                        @if (character != null && character.Skills != null && character.SessionInfo != null)
                        {

                            <span>

                                @if (character.State != null && character.State.InOnsen)
                                {
                                    <span>Currently resting and have</span>
                                    <b>@GetRestedTime(character)</b>
                                    <span>of rested time&nbsp;</span>
                                }
                                else if (!string.IsNullOrEmpty(TrainingSkill))
                                {
                                    <span>Currently training&nbsp;</span>
                                    <b>@GetTrainingSkillName(character)</b>
                                    <span>&nbsp;</span>
                                }
                                else
                                {
                                    <span>Currently </span>
                                }

                                @if (character.State != null)
                                {
                                    if (character.State.InDungeon)
                                    {
                                        <span>in the dungeon</span>
                                    }
                                    else if (character.State.InArena)
                                    {
                                        <span>in the Arena</span>
                                    }
                                    else if (character.State.InRaid)
                                    {
                                        <span>in a Raid</span>
                                    }
                                    else if (!string.IsNullOrEmpty(character.State?.Island))
                                    {
                                        <span>at&nbsp;</span>

                                        <b>@character.State.Island</b>
                                    }
                                    else
                                    {
                                        <b>sailing</b>
                                    }
                                }

                                @if (!string.IsNullOrEmpty(character.SessionInfo.OwnerUserName))
                                {
                                    <span>&nbsp;on&nbsp;</span>

                                    <a href="https://www.twitch.tv/@character.SessionInfo.OwnerUserName" target="_blank">@character.SessionInfo.OwnerUserName</a>

                                    <span>'s stream.</span>
                                }
                            </span>

                            <div class="last-updated">@GetLastUpdateString(character.SessionInfo.SkillsUpdated)</div>
                        }

                    </div>
                    <div class="character-control">

                        @if (CanModify)
                        {
                            <button @onclick="()=> Unstuck(character)" class="btn-icon">Unstuck&nbsp;<i class="fa-solid fa-person-falling-burst"></i></button>
                            @switch (ViewState)
                            {
                                case CharacterViewState.Inventory:

                                    break;
                                case CharacterViewState.Skills:

                                    @if (character.UserId != session.UserId)
                                    {
                                        <button @onclick="()=> CloneSkillsAndStateToMain(character)" class="btn-icon">Clone stats&nbsp;<i class="fa fa-arrow-to-bottom"></i></button>
                                    }
                                    <button @onclick="()=> ResetSkills(character)" class="btn-icon">Reset&nbsp;<i class="fa-regular fa-repeat"></i></button>
                                    break;
                            }
                        }
                    </div>
                </th>
            }
        </tr>

        @switch (ViewState)
        {
            case CharacterViewState.Inventory:
                break;
            case CharacterViewState.Skills:
                foreach (var skills in Characters.FirstOrDefault().Skills.AsList())
                {
                    <tr class="character-skill-row">
                        <th class="character-skill-header-cell">
                            @skills.Name
                        </th>
                        @foreach (var character in Characters)
                        {
                            var dirSkills = character.Skills.AsDirectionary();
                            RavenNest.BusinessLogic.Extended.PlayerSkill skill;
                            dirSkills.TryGetValue(skills.Name, out skill);
                            @if (skill != null)
                            {
                                var isActive = IsTrainingSkill(skill);
                                <td character-row="@character.Name @(character.Identifier != null ? $"#{character.Identifier}" : "")" class="character-skill-cell @(isActive ? " active" : "")" title="@(isActive?"You're currently training this skill." : "")">
                                    <div class="character-stats-row">
                                        <div class="stats-progress" title="@ExpDisplay(skill.Experience)">
                                            <div class="stats-progress-value" style="@StyleWidth((int)(skill.Percent*100))"></div>
                                            <div class="stats-progress-percent">@Math.Round(skill.Percent * 100, 2)%</div>
                                        </div>
                                        @if (skill.Name == "Health")
                                        {
                                            <div class="stats-value">
                                                <span class="current-health" title="Current Health">@GetCurrentHealth(character)</span> /
                                                <span class="max-health">@skill.Level</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="stats-value">@skill.Level</div>
                                        }
                                        @if (CanModify)
                                        {
                                            <div class="modify-skill">
                                                <button @onclick="()=> ShowModifySkill(character, skill)" class="btn-icon"><i class="fa fa-pen"></i></button>
                                            </div>
                                        }
                                    </div>
                                </td>
                            }
                        }
                    </tr>
                }
                @if (modifySkillDialogVisible && modifyingSkill != null)
                {
                    <div class="skill-modify-modal">
                        <div class="skill-modify-modal-header">
                            <h2>@modifyingSkill.Name</h2>
                            <button class="close" @onclick="HideModifySkill">x</button>
                        </div>

                        <label for="skill-level" class="input-label">Set the new <b>Level</b></label>
                        <input name="skill-level" type="number" class="input" value="@modifyingSkill.Level" @onchange="OnLevelModified" />

                        <label for="skill-experience" class="input-label">Set the new <b>Experience</b>%</label>
                        <input name="skill-experience" type="number" class="input" value="@((int)(modifyingSkill.Percent * 100))" @onchange="OnExperienceModified" />

                        <div class="skill-modify-modal-controls">
                            <button @onclick="ApplyModifySkill" class="btn btn-primary">Save</button>
                            <button @onclick="HideModifySkill" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                }
                break;
            case CharacterViewState.Clan:
                break;
            case CharacterViewState.Customization:
                break;
            case CharacterViewState.Map:
                break;
        }
    </table>
</div>
















@*<div class="characters">
    <h1>Character's @ViewState.ToString()</h1>
    <div class="characters-table">
    @if (ViewState == CharacterViewState.Inventory || ViewState == CharacterViewState.Skills)
    {
    <div class="character-col row-header">
    <div class="character-header  char-row">
    </div>
    <div class="character-combat-level char-row">
    </div>
    <div class="character-control  char-row">
    </div>
    <div class="character-currently  char-row">
    </div>
    @switch (ViewState)
    {
    case CharacterViewState.Inventory:
    <div class="character-inv-equip char-row">
    <span>Currently Equipped</span>
    </div>
    <div class="character-inv-equip char-row">
    <span>Inventory</span>
    </div>

    break;
    case CharacterViewState.Skills:
    foreach (var skills in Characters.FirstOrDefault().Skills.AsList())
    {
    <div class="character-skill-row skill-label char-row">
    @skills.Name
    </div>
    }
    break;
    default:
    <div class="character-body char-row">
    </div>
    break;
    }
    </div>
    }
    @foreach (var character in @Characters)
    {
    <div class="character-col">
    <div class="character-header  char-row">
    <div class="character-name">
    <span>@character.Name</span>
    <span class="character-index">
    @(character.Identifier != null ? $"#{character.Identifier}" : "")
    </span>
    </div>
    </div>
    <div class="character-combat-level char-row">
    <span class="character-level">@PlayerService.GetCombatLevel(character)</span>
    </div>

    <div class="character-currently  char-row">
    @if (character != null && character.Skills != null && character.SessionInfo != null)
    {

    <span>

    @if (character.State != null && character.State.InOnsen)
    {
    <span>You're currently resting and have</span>
    <b>@GetRestedTime(character)</b>
    <span>of rested time</span>
    }
    else if (!string.IsNullOrEmpty(TrainingSkill))
    {
    <span>You're currently training&nbsp;</span>

    <b>@GetTrainingSkillName(character)</b>

    <span>&nbsp;</span>
    }
    else
    {
    <span>You're currently </span>
    }

    @if (character.State != null)
    {
    if (character.State.InDungeon)
    {
    <span>in the dungeon </span>
    }
    else if (character.State.InArena)
    {
    <span>in the Arena </span>
    }
    else if (character.State.InRaid)
    {
    <span>in a Raid </span>
    }
    else if (!string.IsNullOrEmpty(character.State.DuelOpponent))
    {
    <span>in a duel with&nbsp;</span>

    <b>Player.State.DuelOpponent </b>
    }
    else if (!string.IsNullOrEmpty(character.State?.Island))
    {
    <span>at&nbsp;</span>

    <b>@character.State.Island </b>
    }
    else
    {
    <span>sailing </span>
    }
    }

    @if (!string.IsNullOrEmpty(character.SessionInfo.OwnerUserName))
    {
    <span>&nbsp;on&nbsp;</span>

    <b>@character.SessionInfo.OwnerUserName</b>

    <span>'s stream.</span>
    }
    </span>

    <div class="last-updated">@GetLastUpdateString(character.SessionInfo.SkillsUpdated)</div>
    }


    </div>      </div>
    <div class="character-control">

    @if (CanModify)
    {
    @switch (ViewState)
    {
    case CharacterViewState.Inventory:

    break;
    case CharacterViewState.Skills:
    <button @onclick="()=> Unstuck(character)" class="btn-icon">Unstuck&nbsp;<i class="fa-solid fa-person-falling-burst"></i></button>
    @if (character.UserId != session.UserId)
    {
    <button @onclick="()=> CloneSkillsAndStateToMain(character)" class="btn-icon">Clone stats to Main&nbsp;<i class="fa fa-arrow-to-bottom"></i></button>
    }
    <button @onclick="()=> ResetSkills(character)" class="btn-icon">Reset&nbsp;<i class="fa-regular fa-repeat"></i></button>
    break;
    }
    }
    </div>
    <div class="character-body-row">
    @switch (ViewState)
    {
    case CharacterViewState.Inventory:
    <AdminPlayerInventory Player="@character" CanManage="CanManage"></AdminPlayerInventory>
    break;
    case CharacterViewState.Skills:
    <AdminPlayerSkills Player="@character" CanManage="CanManage"></AdminPlayerSkills>
    break;
    case CharacterViewState.Clan:
    <PlayerClan Player="@character" CanManage="CanManage"></PlayerClan>
    break;
    case CharacterViewState.Customization:
    <PlayerCustomization Player="@character" CanManage="CanManage"></PlayerCustomization>
    break;
    case CharacterViewState.Map:
    <PlayerMap Player="@character" CanManage="CanManage"></PlayerMap>
    break;
    }
    </div>
    }
    </div>
    </div>*@



