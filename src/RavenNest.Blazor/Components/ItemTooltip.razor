@inject RavenNest.Blazor.Services.ItemService ItemService
@if (Visible)
{
    <div class="item-tooltip" data-item="Item.id">
        <div class="item-name" data-tier="@GetItemTier()">@GetItemName()</div>
        <div class="item-type">@GetItemType()</div>

        @foreach (var stat in GetItemStats())
        {
            <div class="item-stat">
                <div class="item-stat-name">@stat.Name</div>
                <div class="item-stat-value">
                    <span>@stat.Value</span>
                    @if (stat.Bonus > 0)
                    {
                        <span class="item-stat-enchantment" title="Enchantment Bonus">+ @stat.Bonus</span>
                    }
                </div>
            </div>
        }
        <div class="item-requirement">
            <div>@GetItemRequirementSkill()</div>
            <div>@GetItemRequirementLevel()</div>
        </div>
    </div>
}

@code {
    [Parameter]
    public RavenNest.Models.InventoryItem Item { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    public IReadOnlyList<RavenNest.Blazor.Services.ItemStat> GetItemStats()
    {
        return ItemService.GetItemStats(Item);
    }

    public string GetItemRequirementLevel()
    {
        return ItemService.GetItemRequirementLevel(Item);
    }

    public string GetItemRequirementSkill()
    {
        return ItemService.GetItemRequirementSkill(Item);
    }

    public string GetItemName()
    {
        return Item.Name ?? ItemService.GetItem(Item.ItemId)?.Name;
    }

    public string GetItemType()
    {
        return ItemService.GetItem(Item.ItemId)?.Type.ToString();
    }

    public string GetItemTier()
    {
        return ItemService.GetItemTier(Item);
    }
}
